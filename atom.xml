<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>code004&#39;s Blog</title>
  
  <subtitle>Think Twice Code Once</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://code004.ml/"/>
  <updated>2020-07-25T04:42:06.744Z</updated>
  <id>https://code004.ml/</id>
  
  <author>
    <name>code004</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>怀疑chuangzhi攻击本站</title>
    <link href="https://code004.ml/posts/chuangzhi-attacking-this-blog/"/>
    <id>https://code004.ml/posts/chuangzhi-attacking-this-blog/</id>
    <published>2020-07-25T04:30:48.000Z</published>
    <updated>2020-07-25T04:42:06.744Z</updated>
    
    <content type="html"><![CDATA[<p>怀疑chuangzhi正在攻击本站，已进行相应的防护措施，如访问时页面加载缓慢，请谅解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;怀疑chuangzhi正在攻击本站，已进行相应的防护措施，如访问时页面加载缓慢，请谅解。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="公告" scheme="https://code004.ml/categories/%E5%85%AC%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>本站域名可能将于2个月内转换到code004.cf</title>
    <link href="https://code004.ml/posts/about-domain-transfer/"/>
    <id>https://code004.ml/posts/about-domain-transfer/</id>
    <published>2020-05-29T17:24:04.000Z</published>
    <updated>2020-05-29T17:26:15.259Z</updated>
    
    <content type="html"><![CDATA[<p>如题</p><p>相应地，大部分服务也会转至code004.cf进行</p><p>如果可以，麻烦互相转告，谢谢qwq</p><p>后期可能两个域名同时运行，具体看域名提供商咯233</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如题&lt;/p&gt;
&lt;p&gt;相应地，大部分服务也会转至code004.cf进行&lt;/p&gt;
&lt;p&gt;如果可以，麻烦互相转告，谢谢qwq&lt;/p&gt;
&lt;p&gt;后期可能两个域名同时运行，具体看域名提供商咯233&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="公告" scheme="https://code004.ml/categories/%E5%85%AC%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>关于Windows Update</title>
    <link href="https://code004.ml/posts/about-windows-update/"/>
    <id>https://code004.ml/posts/about-windows-update/</id>
    <published>2020-05-06T23:51:06.000Z</published>
    <updated>2020-05-07T00:36:33.651Z</updated>
    
    <content type="html"><![CDATA[<p>马上2020年5月的更新就要出了，于是这几天又看到很多很多所谓的电脑知识公众号、营销号发各类文章说如何避免强制更新，也有的又一次因为更新说微软很流氓</p><p>这一刻，我真的有点愤怒了</p><h1 id="关于Windows-Update"><a href="#关于Windows-Update" class="headerlink" title="关于Windows Update"></a>关于Windows Update</h1><h2 id="每天都有更新？"><a href="#每天都有更新？" class="headerlink" title="每天都有更新？"></a>每天都有更新？</h2><p>不存在的，只要您没有加入Insider Preview（内部预览）计划，那么您最短的频率是大概两个星期一个更新（几乎不存在的意外大Bug除外，在每一个普通用户被推送更新时，已经有成千上万个内部预览计划参与者进行了不同类型的测试），而且基本都是安全性更新或质量更新，这种更新，新一点的电脑安装就几秒钟的事情，重启一下就完事了；旧一点的电脑，也就最多二十分钟，这种有啥影响？大更新的话是最多一年两次，<strong>这个是你自己选要下载和安装才会下载、安装的</strong>，这种的话新电脑10分钟，旧电脑最多也就两三个小时，也不过分</p><h2 id="更新后完全不稳定？"><a href="#更新后完全不稳定？" class="headerlink" title="更新后完全不稳定？"></a>更新后完全不稳定？</h2><p>不存在的，前面已经说过了，有成千上万个计算机爱好者帮助微软进行了不知道多少功能测试，基本上轮不到普通用户来反馈Bug，除非是驱动有问题（这种都是15年前的机子，不合适就别装win10好吧），否则基本上是不可能有任何Bug的。如果有Bug，建议卸载掉360，据说它会篡改更新</p><h2 id="一更新就要搞一天？"><a href="#一更新就要搞一天？" class="headerlink" title="一更新就要搞一天？"></a>一更新就要搞一天？</h2><p>跟上条一样，要是真的更新搞了一整天，那么首先建议您卸载所有杀软，Windows Defender完全够了。如果还不行，请您换win7</p><h2 id="流氓广告？"><a href="#流氓广告？" class="headerlink" title="流氓广告？"></a>流氓广告？</h2><p>典型中国人思想…而且还没点版权意识。八成又是破解系统吧…首先，请您购买正版系统，这可不是一两块钱的事。难道您觉得系统都是免费的，所以会像国内一些垃圾软件一样推送广告？哦对了，如果您说有流氓广告，麻烦您找出来一个</p><h2 id="加入了Insider就无法退出？"><a href="#加入了Insider就无法退出？" class="headerlink" title="加入了Insider就无法退出？"></a>加入了Insider就无法退出？</h2><p>谁叫您手贱呢，耐心等下一个主要版本吧</p><h2 id="更新后个人文件、软件信息丢失？"><a href="#更新后个人文件、软件信息丢失？" class="headerlink" title="更新后个人文件、软件信息丢失？"></a>更新后个人文件、软件信息丢失？</h2><p>不存在的，个人文件和软件是绝对不可能丢失的，当然我讲的是更新，不是重装</p><h2 id="更新后提示更新失败？"><a href="#更新后提示更新失败？" class="headerlink" title="更新后提示更新失败？"></a>更新后提示更新失败？</h2><p>我没失败过，人品问题或者电脑太旧了</p><h2 id="更新后无法复原？"><a href="#更新后无法复原？" class="headerlink" title="更新后无法复原？"></a>更新后无法复原？</h2><p>看看设置啊朋友，那里啥都有</p><h2 id="需要使用时强制更新？"><a href="#需要使用时强制更新？" class="headerlink" title="需要使用时强制更新？"></a>需要使用时强制更新？</h2><p>设置里可以暂停更新，普通用户最多35天，Insider成员最多7天。到时间后会自动检查更新</p><h2 id="无法关闭更新或更新造成流量浪费？"><a href="#无法关闭更新或更新造成流量浪费？" class="headerlink" title="无法关闭更新或更新造成流量浪费？"></a>无法关闭更新或更新造成流量浪费？</h2><p>设置里设为付费网络啊… 这样就解决掉更新了，当然组策略（家庭版不自带）也是可以的</p><h2 id="如何更新？"><a href="#如何更新？" class="headerlink" title="如何更新？"></a>如何更新？</h2><p>大部分安全性更新和部分质量性更新为了您的系统安全可能会自动安装，您可能说有杀毒软件就够了，那我实话告诉您，国内杀软的话，论查杀能力最强的其实是360，但是很多人不愿意用它（包括我自己），所以没办法。然而，就像之前的一个勒索病毒，国内外无软件可以解锁（除向作者支付外）。后来是人家把密钥给了火绒安全实验室，然后您现在告诉我国内什么腾讯管家金山毒霸甚至一大堆不知名的小杀软，我告诉您不可能的事</p><h2 id="我需不需要更新？"><a href="#我需不需要更新？" class="headerlink" title="我需不需要更新？"></a>我需不需要更新？</h2><ol><li>安全更新（自动） - 必须</li><li>安全更新（手动） - 最好安装</li><li>质量更新（自动） - 最好安装</li><li>质量更新（手动） - 可以安装</li><li>驱动更新（自动） - 必须</li><li>驱动更新（手动） - 最好安装</li><li>功能更新（手动） - 可以安装</li></ol><p>注：</p><ol><li>质量更新示例：<code>适用于 Windows 10 Version 1909 的积累更新，适合基于x64的系统</code></li><li>功能更新示例：<code>Windows 10 版本 1909</code></li><li>安全更新示例：<code>Windows Defender Antivirus 的安全智能更新</code></li><li>上表中为“必须”的极度建议安装，否则您的电脑可能会中病毒，或者遇到驱动不兼容问题</li><li>上表中为“最好安装”的建议安装，虽然您不安装可能电脑也不会有什么大问题，但是修复了会更好</li><li>上表中为“可以安装”的，可以由您自己结合电脑使用情况和磁盘剩余空间决定是否安装相应更新，当然了更新有益无害</li></ol><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;马上2020年5月的更新就要出了，于是这几天又看到很多很多所谓的电脑知识公众号、营销号发各类文章说如何避免强制更新，也有的又一次因为更新说微软很流氓&lt;/p&gt;
&lt;p&gt;这一刻，我真的有点愤怒了&lt;/p&gt;
&lt;h1 id=&quot;关于Windows-Update&quot;&gt;&lt;a href=&quot;#关于
      
    
    </summary>
    
    
      <category term="随记" scheme="https://code004.ml/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="系统" scheme="https://code004.ml/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>暂时的告别，是为了更好的开始</title>
    <link href="https://code004.ml/posts/temporary-farewell-for-a-better-start/"/>
    <id>https://code004.ml/posts/temporary-farewell-for-a-better-start/</id>
    <published>2020-04-03T10:46:33.000Z</published>
    <updated>2020-04-03T10:55:30.905Z</updated>
    
    <content type="html"><![CDATA[<p>暂时的告别，是为了更好的开始</p><p>GC Server Legacy（即现有版本）将会于（预计）4月12日发布最后一个版本</p><p>开发组会对项目进行彻底重构并加入大量新功能，GC Server Renewed 预计将于2020年9月1日发布</p><p>永别了，GC Server (Legacy)！</p><p><img src="/posts/temporary-farewell-for-a-better-start/goodbye-gc-server-legacy.png" srcset="/img/loading.gif" alt="goodbye-gcs-legacy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;暂时的告别，是为了更好的开始&lt;/p&gt;
&lt;p&gt;GC Server Legacy（即现有版本）将会于（预计）4月12日发布最后一个版本&lt;/p&gt;
&lt;p&gt;开发组会对项目进行彻底重构并加入大量新功能，GC Server Renewed 预计将于2020年9月1日发布&lt;/p&gt;
&lt;p&gt;永
      
    
    </summary>
    
    
      <category term="项目" scheme="https://code004.ml/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="纪念" scheme="https://code004.ml/tags/%E7%BA%AA%E5%BF%B5/"/>
    
      <category term="开发工作" scheme="https://code004.ml/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="GC Server" scheme="https://code004.ml/tags/GC-Server/"/>
    
  </entry>
  
  <entry>
    <title>关于虚拟专用网络和洋葱路由器的安全性</title>
    <link href="https://code004.ml/posts/about-virtual-private-network-and-the-onion-router/"/>
    <id>https://code004.ml/posts/about-virtual-private-network-and-the-onion-router/</id>
    <published>2020-03-25T04:09:43.000Z</published>
    <updated>2020-04-06T15:22:43.902Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">本文已加密，密码为虚拟专用网络的大写字母缩写</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="13943a7f53660e95f22d75c607b25bea6ecc81c72e8843e2fc3939da1cda9d23">1bf3590c97bbd0033f28b9bffb8bb386c0415de1ae4b803baff136e2c63cf8ecd714908c60229fc809759221833693d3207405e90c7a215d4e9cffee44a250ae1b7dfaafc692301bff85ee565cb8cbec2777e01628fa40616bbe4439ce8c3c216e75d22428ee59af7b5e67732f672824c5fe68beff71d82272e89a8e496a2015b3bc0621717f191938329480f7f24b88b3a8228ea3b4c75d3d71e53f766ccfa5198254ca55fa0942d21ee85b7c9e49dd059ad81beafbfce9a3630bb715447041904057eb0c1abca50fc2beda54c063c94db3516005cca2e10ccff87afc29d6d491cf22adbced1e0f3343e20212cacfd4114e4951db4449c76988f691a99e312cc476d3fe46ce63383c02808fc6a679c9eafff29f45d89413bb66275c58eb283419b3da68d2d9ac0a5ed2c45ddf2a7dc9cc75038abf97d20375eaf39fe66f083d53c555cbcf063055d801447b0ac2d66dd6793fff7b3c8c57cf97278cbed53ba71c94360e0dc3bb857a2b413daa2aab43360d31bc75687f2559d64114483b04c743dd587bbce915378c63e2a87918dcddc537a4659ec24d814d90e541fd9410abab305522f1013a2a0239693254875d4c0c315909d99c841c2dca630a39a35693ea0ba77b52afd78a6f88df7f8cd3317af5b898244f49ce628ff281efdf759be98e901acfddb6306402efd332b47c3f4af36846ad8988ed59e473d95c856199a54bce22d96e96e1215d4cc89d5e9156ab486e8ceb3e10fb7bd3d8e68305d6e7649515f02c85110b2425b3a8429b3a830db0ce361623f3e0a6e6e5d3c1c939f77b426b555895140158b7a64312da707275a162e742a2a349dd8bbe21e84d596d2120a6e90a2deb378708bb80f60cf6154874814e642ee5929c7086e0ea076bdc908082bab7053322d58a736fd8c3d15f964467f2fb027ef3d2e9f170bfd57a029d93435514c5f7f418bfd6f7c6a2c582e324213de4e7cfe1be1cb0618cd86b5c8ceff5486b65781d8d767a713aa981b686d82b319d1d90e944bd50ed572a13d22c98a93fd1d77164f4b6855fce0eac61478c56765913d32c894da2ec99e116a069b1d9ca480ec9dfafa1cdadf8233fa6fd3dcd31851fec557f3219389fa1748359f628079c87fa7569d2cc75cc1aaa2bfcd0ed3ef7d608bd957e7505da1c8e44f3f19339aea2d7965b3ae5dc5bf823c514e49505363e5ea193c7d9e029582c67bd52ed2bee0d8f82ef3a1527c3954de9d9439df625728010ec8f72c10394eab91cf76719e3ffcfe9a04504dfe0141c9c1f882ed07dceb8833d5e9be9d9ce4e6664ebd6f7cb1c07639713e30f8c65a67703438416f6fec1b640bb305415b717d7e39637447d451f4ed76e4b46c136bb171ff6af9270e10dd564bbeadcab271770531079d17927a376d5d49eafd5f50295bbc22071f22fbc11b27c0090a07a27326072aff6cf0521dd4cc705fd28a5f4d73834f55359128ee582f3f4916f9bb83308c6484a87fd6bf4435e1ecfc30079e8c95be702dc3f21e3e51c54566b05a07b9fb4bd4d06f51df9eaa2fd1dc97a60e46e3e05aa684f59d12a9f04e12e0b05657718a02fef75beba3830e68d10521eee4fad20b9a11a02c703b77da88043e6dadf1dd3284ea8cd1e2390b6bf20edca0f518b240bb29733f726077ae29a0edbe28141d11b783b1fd5879763ec9052b3f1829a798270e36e65bbd127cf80c6f26d7cc8762b97a10b467616ecd6753069595b1bf54dd5cd3ee1f06c6aeb28545a24ed4e477439ef0d31a0480429d36bc89dbd4366f8d641097bb51e4026eb80f37d1680847ae1a2d1e078f417e1b819161d8836647f9e08c9d9717806f3c801b34167cdd215cbbcf24ba9e11a3c3f38c251ebb28c52d57b8e7ebda91b2f0b3443ec0583b70317be00b23dfbd0f72074462de710554ba7bd3b5a9d37f9f28b45490d98aeb69ed0fc1ea4c586b908cc64d4292c91b722d88ee578c73a1a6e50263aabfef1b2a8abd941e8f8935a98a53c45afcfb28aea201a4e32509045165b40b5bc4ce88106853679d268b2179d5148ed3d6982d5f4e70a9fa8767fe3d256c48d66d8d6eaf1715eab55d45d1d926bf005040e1aa649ef6c10f04881b2a2f9c5c91f78a3fbc684c57bb852ee2fa721fdd914747f67136642048c514547f1df32325fdbf3ba9a2c40f4a58ffce227e48ed9dbabdf8560ff550985d436b8bd4e4293e11db5db0ef2d64b85c8d06e2b2d770a0d5e653b3186c4c10e173ff5f343bee4c2afa274b9f1508afe4599d00fe98ec2be3c59c4ed9c19861e02c4c199dd2ea072f867612bf20e60642effadd9e6a90de5178b957058510716e7cf9556153416d7b7a8e646797b01039e38c9db13d48867527965773dab16ba0e7caebb496ec839568202706424f0b8e2c61deb6ee1ac175dfcc608d42aabcbb67123567ff3ea92dc67c6728cb7cbfd52de9f50427f7ffce454e3ab9cf90dd52cb3f8538d94eda72d02e6b016fd09f3af3f41e1317f134bcc52e4c3e5d3363b67aebf1deda2e03e3d205a2aac02dd786b736d153a7a8c965de76b16b26df3bc8868b39e4c0b0819a854513d0121823cf89eccdbd848cdb2560b7acbd43d0c8bbac1ecda3b51159da40cac604b64fc9f0f4188eb75ac9779c5a49baa10fe2dbea910510eae502a4685fd40ece4c270c74cbc18b3ee1b448c20ae2d6d63b3e9c0bb7df662103513393587d2fa33518f5bad7e166935bff8f719ad828263b6f171b67549cb56ae67ddffde52d5f0387e2efa76d4c9eff06a777568af7dcb546801cccfb6061ed2aa098771642776eb83be82ad639582c8429a6057ede2e12c733ddee07f7fba428d3e549441cb8151b0297c82d2b2a7f1383ec7d4787baae6692f26bac8818aca67048b462e729b29f7ca6cdced066bcea4e8f5e1aa590c84339c039f9c6b1358e6b4216d318b10984ad10702636c079dfd94e04a3b5d7952b97130f8946cf69c53e562493164d514ee31d2554bb8fbbb21f1044037f8269fa00911633bb2e0280125b1955e8483bfda33eb8dd16217bb3b30932f187fe448c19646a3c44a063b5fbf30fe0af45fa6f2d35a0f7cd8ee03a0e042e8fdb53989ba79f54d65f8387744c7e12ad02fb2d94400658a0788ec2b15b5ac47e62d144880ee6b4fc6076e0d32b41c843af78f64703ce6b239727c84b93e0eaf456289315349e6ca104c158c7b5f07bbb72db8eab2b9c979c416d2dbad67a662a4d0c42beef83f8758a7fed3c1f93e4f1e731600c2a4fb663f2518dd6b354a820de954b44acece8dd73e64f2e2b0a6f25d4587911f7a16588d273f7a28d48ccaf1ca7eb5acac8c151b3bfcd395ad363be0c022c61d433a532237a30e9df7a1ba6947d49291e2940a508ee96794635595a5cb7d0c3f7e33f921eb556e931b6a7302608715ea730e95037323b1b600f68a965e9cc8b00da83735248bf2072bbaa6d5c1176d0b804729b3115ad6c1b913b311067bd0994c4cd5b30fc78ba7cfa83926b75ae20d2a3beb58c5fd080abab61cd7c3b8263b39c4fef2c1a00d0848145aa7615bede5baa8191c5903c4cf542ba36a4aae5d1975f622648ff086e33b4addc2014dd49bd73d1ca60132093e9278f1432e633eadffa3fd4f914775eb27437c9195325c71183096bae588401c91297600e8f5e543f26f6b68b7c62b4f95b24894cd8cc662349d8574a12b62369c542276ce56120644d1d07a13e9bc5793ae45fc4d78b7921933072096d8b017df274ea786aea5287de35627a2401483876e44b831d87ad9cc80a773a0895fb887341968ed0f2d58101076c3bbad4d13120f739c070bc3b92b65bc659e9e7a297cc430c07cf3ad57cc5ffa3c5c71f947b30cc0c3abf8e67d653ff3f84291040365bbfe3bce7773ca8f600a5bd1b4c555c2fa7c1c337840fd5db76e0d5d1df598d92151cd0342fa19c54677f66fe9b2b500c9ad32d2e861b926438e60b0e52af4f3e5e771ed8f0a376bf6c73d98a5b39616d992ed56eede1b5ebdd4499cfeab65568542a2051dfeaaa80548958cf8cafb02e65d2f9fd17cc03a32539755ea82f3ee9aff6bcf6a7630e523e5d35f3f106df97f9e0731d54feb299a8018e33c221e53fb34b5c6f0c7985a695a5d2167064205a0e170bea0f2bfab1fcc2c84f0c3bfe7dfa819091b9e0a35da5ddc1ee75a17810de8a5c9dbee2497aec5a6a8723a412193d88e95dfa1d0141805300934491bb8d149eeb98f714ba979a20c1911e0f4eead0b8f9dd6e521af001961ed371e95fe16ae4217ed98adb0eca4e05dde5c3dac77633442cbf68673a3392dbaa290e23762f9916d0f04e7ef573eb136390c55d5c3642decd50f961da2a4aa1e033dc0f43447a8d328afeb5eb0d39c263b9f1d303de5605e0dec4620f856940f588597d2784435db637e781a904055a9dd0ed5f4336b6bf732b42f3789635dba2f479563725887213da30fa58b6c8c1f71f503bff6a55e4583068c19e3ef60c64ea787867bffd393855f9d2bcfd3d5259cb2dd4703930f256f08c2217fe88d94f7de7f5c01737ec5f6ef9d75a9e37a90e79c60f12216f3fd85af4c57be07a88a092a8829b0d53783b4d9b4ccfff82b45599295cee5f86514b70f1c3af0e694b8f5471549bc0759be8e835bdd27d018c97add5a9692041ba13b91c1395053f923c5cb57ac8315f1a5b4686898c193b5df5a492ccb715ba26e4022287ed12853d162da8a03b461c659b66b2956fdfb287270cf200906c4af97d7be2fa94f9658e8ebdc51dd22a93e8b772b86630d6745e79aa528244ac35d23aabf6fff29d41d2b5d1cd3430d8e1589df7ecab0104126324ac305a334d0e82c9a8c3c762f1a8659c0bf4026eea749519cfd3b1923dd63279d8b252332ec782fda6598d053d47fd11aeb25c9dad157dbe8b36105974c2f870395bb3092015e8349c1b0e801cfe975f1eb95c19752839dcf0cf0d77efe842ed9823809b951aa202fbb7cc79bcc6cb3f2bc6ca84c7729aa78af31dedfe96490c0cee81072cc4c2c88fa713689214e803375713f8e23e32d72dfe180006fad15a8db404d944dc7669517ec62d17456222f61d71147e5ee3be9f45cee7f4b005ecb58ca5ca6c73ad80dc993f25922fbdb04b1e77979f9cf00e37fb7bf0d24d619ce60a2e7c2a9e8f34730281b10af96b1fdd2099031964c7d331d6990607cd1dd83144d42d07bf5381cbcb4829590a50015654f680514aef2e67846be0dfa989158f80c0ab53156dbcaf0fd4d8193ccbaf1dab1c6b367a58319e432148d087495b58c9ddb6f5cf3d0835c58564c6dc0aaa0f27fc8807aea79c06b2e3250978bbad92700233e6a335674c49f9c20bb77c3ee852aa6806abb4baafdb6c70e01d8b675b7394f15278a06c19ca6ccb5dc28e3eba8f23c73d1f7109d2284d8a1cf3830707895649a3204db45c649695e03155d0692c05038699289cb4e9b0a08147e872cb028b8da73a1e3673326e3f258855ea764be27450c2e449d441ae8f42d9b1158dd06561ccf1115d7ed19468ae0e3ff99c1494e14b1f2cd0e69dd09b1d0c966251b6748076bc4adb1691ccc9e25fe2eced90aa285ff964149b36797bcd78f64099fa78fa6601827b35943197772cb947045f85168766162d8c151ac72b2a4d0c6cc4f425395943a8be36008857463ab5466da032fe186ff0ab5536e45f71dc37a7b335661ecc4c2da0baf2aea045c347fa783527833342be935e7fa4ea89c2dcdf8b34af7ae67afdb413d484a3c6e4bdfaddd4a21a94231506f3c648bc03734a8654372d16fc11de6c4f2a73e29b534858bc69da37bd85369184d749e4e8709e511dc30e81c9660f21390820e5465ff70e39d6ede411303dc52b2295222722b4991a1c2eb2de5f971e2c643ad7e235cd9136112ea22cb46c2dc215d2f7a1f1eb9fef2b0be0ffcd3ad0eb1d2272762b45c2ace1aa43ab1d896e5ff44480d169bfa90044f10a7b68cf5b8292a4f54e364aeac17970545faf8295f195d9f93ee7bf138cec007d33df99e7a14b2f30e1bbbcb4e38d9ccf329eb45a49d829ad5bee62aec88b8430ffef07ef0ff25447bc3193dc5deab6a1b50629b5893d2eae44ec15712539075f288690bc30b0b2837c2bd9ad058ab8a3a26c174d5df77bc22e99de8303e307abd70156a6bcf533d8c4beb52ddcc3f529bf64dcd29815f8205983d4a1c6771857578af7672bc77581c9a7fce9aa16b13577bbae805b802b49b8339946345eab22836b7a524375ad6de85cf181a4b36466e84d99671b7c6a818a4573cb67c190936072c8db26ba8a89252eb21dce529005670e3c6f868123e14f68dc63458d5e9aac64e2c2eb21fb7c1902a99f64a27e8ec435cace80db79cefe572b7db18983ee946d34a650f5edf8396cf065d760adb83b150ec21a2243d616103bd77b99e823a7cc66af1fb853b13e8942eb53d63c05688dafed2f3546b15664c46bee0690ae4d511d13061c71591d3b2f1a752e7d3f1576e3eb5b5f4eefb0559668bf561cba6c4286fd6c5b0567ae7a72884807d4f0efced3760cc019188be3c4e96a1edbe3dfec8d29b25c71868e400a683f344dc2b415d3864a07bc496490077a664d166b2713eb463ed8526309f2599fd78ae91742a1761b08e531567a95147b38045c30c4ca2ced009aa03c7e992c2b72d506317e8bfb2f126dc13754d62c4742c02b3b1518a49a7af271598b5b8085147500ef6e8483a55ac59da01ee530234df9ff78b156b70a215114c06f6175e44a426c56af936f9864809dd36ec634a4a31b6064c31c1b734558e16bf170802b4295367289cf444c475984b5d1d06956acedb1ec4ac8c50c72754cb3f78bf4dfdf13f954542056e45db328d47590de853ffb171973eb27a4a793bc23cbe0f7d1dfb0f2f1581b5530da0ccb5ee407d5c7c24f244f6f8772e47b5c994a9f9f81ca2a7644bec0a162eb5eb643b4d138c7aa3752dbff198964076f251fa0d36a78785e53b7fed2534b73cba10479a404158ffa33bbd3d704800852baaa8fd731964447d8a319f9486efe95dc5cbf67fd0152728f99f1b6568496188d088005f7df398b1f576d91ffe8333ca9f211c0084e3b1c2813ec33412e890935bab51c75378ab4ce7dffd5d49a556f1f6b6a3d328555a3ba7e0c89ae3f114a79c5f368715410149734fefabefd088d63494ec580154c2f82c45a108e4996d890a96ca4d8b29c68b2c4561e9bf274712d02b296bb5cf70db3309de6a2c9fa98d05ef71ea45390bed2c61cd86de11872079ba1880a4c244e99dd097d2df24598b1012aaea492fe6fd6651bdecd870ceafac82c17e787571914f6b3f5d8e6377e3b9a63785874ff5ebd0ca3a568c1d4f67316503de74f21332b965b622521ac2559056ff7fc88faa7f195f4e97251e9c78371b918d29884f19d274f9159572d45b08cea5411de3cc015c88fb9202afc4edf00c43fd8a8ed20ac5e8220202238508419085c93b76f7ed14573c1533d0d75acdc14f01fcc188d86df01ab605a5d3fa2047ced07376e85c659e3c510e07860124993c2ab7d17bfaaf0c2bcd6b2e27705b80ee21456817777884a507a41363f149a8adbf3078a2774b4b5a62f0020efca72d787ff95a910db460a11d66c3593ed283536b6505c279b4f665c6207d210ec3a356e8e1a86961db660889a007311f80f0daf24acd30b3df65eb79ec4473e4e73a70bfe40ff7c38a3c41c96ea4fc869d5c49f4cbb39148d430bac1efa74ae8c804f647f5aa93081fac66c04873b12d3128a403498075ac0368298dfcc7e51d280dea9ac9b3b675c530be093b649118260f1df7f66ff935308da2b5bcc21af6bb32f39c3df28fda33bf6c2a5a982efef2182254152bedcdb1337f708aaeaa505942ad81b47ba5727b64e7860ded32e9c282f85edb522bb535f6727f3ab6ec516e2e8a4ff8b897fc562aa7a9bbf3a8cbbd57b44a0dea03303dd3d0a032481aa8d4a6ce75184362791bb1e10fe53eacfbcada45b52b07d453f30b97182aae572e2e4c26ed4cc0508e577aa6e44dca3e154652bdf6b02c060eaae48d234afd66a937a9a32d706d656048ebdbee176d74132eb0008b13d48ea536813ca49635eebc40812da558a3e687e54e2bf4f5cc8620abf987401b9d5c2d53abb328bb299e5b5846dcca90b9b999dd03e8a198f8ec155eba5f661b6218974a91023c464fc549be21f5879dd7693ac7124fced643b9c27a407b9b263d33e41f133061e1b7584a3900c5898e1754cba3b3db719274f4938a81879792fc9225376a876efdeffca2bd9aea5cbaea1c7e02c165c0404d59facfbfd7c43b43ca26a72f46bbb30332bb7b48093b336f6f693293748704075fd446053e64a5aa44468a7040dc062fb5ece081cb9c1f3a3718d7f98a9bfd713a07ddce5a4547561ab0266de65f2cb24356fb944e8896f104923467b5b9a5c30eebb04a6dcfc616ddecab768d4c087fccddaa3ca9515be318fe1d1324b967a684ada0595e2231a34c7dfd2db3e7410d78c69a42403eba445120dd707dbd147ff94ddd01bb5d12e9c07c5e97f8c812c660080a28a9e68e51b7b37787511d77e4fcc0ee420d11fe12f70d384864e9e9ed7b778138d4a95ea7699a53b48538949471cfc19787b94fa7b31ca96917ae2c9f5d158ba4b6c00e6210adf39a2d41b509a75e0cb989c04251f17551c48da74599132475e13de9cd7e2d89b2af12a899fda1393e5b5bba0d3e9b281b858979e1be21235d15dc965c90bd342e09db85f5f62219e2d85e7ffb6dfb4c8ff951208502e254453fbd99dade2599152d55d15deac985699352f6abe2cbf3742f332672e1257c0345e93ba75167374bd1e56c9171959a93f26e6bcfa1f0e3b316fbe7e209615e6d5e0e6e64f869eb1d40e72c4961daaa0407953f523f0ad424616529bb68895f724d22b5b27a14a35f769e1ba131f849fc5491cd6e8628889e5da3757d8c935c920b674df5164a9db0e323d8ad38d1c969b311354a3c39a8a513a02a9a83b3a0c10b2148fa85d0877a0326ac2ad9f32fad5fc438d5b4e0d2be4e2e71403bf36204ea7501b585f784899abe9f88d30542e665a1d232ada4e65ba3f3a51d0ba6819c7bf474c1ec6a5174a347722b14b210c004482c3e0c7b055c81b429f24a41d90d8b172c1ccc094a5f89abc547cf45bd618b49afdce9997b78903933ff706d83fa318e6de9d808f0fa6e501273728f130ec4bf1d680b64d806b05e98656c0d01414921a1807270615205c4bebb2793372b313eea1b0a608b162330ef45ce0b752cfa575fe7921698785dfe8814942cbd8e8a5db71c16c3379493d4ca9554dc0701858bb41e3a4b7da4ee2d215d30cfad6582c4f74cd8db610ccc2015d24a662bf4a863420ccedcbcff790e0b7d9d1282fd82a41c28e64ca4d87784d25dec80ae605270463dfdd3f333b8736d46711a85b0f2962355f317af3badfb6c44adb7daaa70a3a29439b034c108132baf58567f9a96a6975f101755ea1c1c4acf621c4f5fc77c2fd67bf81bb5629a116ad2c6a5687fba67e3e37dd8af524f4d2b9aa73beaac27f65e2a319a20465fdce7b2280ea8514ab347657bfb323190b7474bb7df49e8600b20b19367c8ffd8b74756c563b70b71157692858b24eef7f31bbaf9859f627a14aa4fd2dca903be2174f0b36a68573d1e41d6b142c0c0472e90fc72cbb1011a71ad555ed05d0b30ae1eebfddec6c82f8d7a05457d65cc9a7540750179a03d5e6c004264cac7e7a7dec709885bc8ebb4e721155c6af443e31125abfe8b94024ccdaa0693557f15ad0597ba65b001462693340a6052eb5f8ee626ad5328cc93e97b307ad4de899fe34f7ac9c08657bc24a5e67d4926fc6be788feff00254d2396b838b87abb2c1c1a48e922b64a1e2067151a46b3268e14a3e8c75168a86350df4041c6cee0bc431fe1d7c158d0531b5880cbcaea8e34b387ccd64e2b52b3711389a4ce06e618fa1a6f15b6615bb9147f7083ae1084c8576eea13fd98d2d9da6f1c9220feb33c9a56c70c849598f32714baee0892ed4a1d6f7d99a6704036f24681748d264575e9416ea55d80a4396daa22280b389adfc0be2c5207d298320472204e17933927a70a43935a9811538be7fff56a478316e9db7f600aa1cd88175fe336529b850f6b0a1c27457767ba2e338e1dbac19f46f1bc5b759e09eff7a1e1bfa11aaf07e21abed1cf7cb61a86cb42f57e996eaa5912f740f2590b7adb52af1809f023daf9d7a29bd7acc64c1b901dcac03d669bf9cb28cbc213695501d0e16720be779d07aa22000983915e5ae3f7423d8d74b345e863bbfd087e6b91b258c5c60381bc7db1f67c909d34b5f0a92171893105a7f55279afaaf9fbb4beb6c2a9421f051f22855f51aadcb2a3f97b727f6ebe3111097162947abb1b362fbef4f5e177f8b367a9f8bfdc7f346c73bd9e07ec684c0fb943c26ce3a2b5aa0a4b020e74c5a4c8db70d34abb2350ebb316b66739d079264d2c117bd27cfe741a24530067cfeda3d6a1a2d358211bea553e09cd75ecbf0a1ad70884dc8d9b7f9b7f9290ef737a335b0f4be69a745e5ac90d215a23e36293135fa0a3e4e86181b2de98c83babc189116f464164e7fe4fd2a57f4abaa2b46ba97e770ace8576a7b02637053a48b8eea5c842d0ab1f8986f4f7837008a9d47d28f4a63159307b46910cd78a782f908fe0861eb673cb349013ddcaa947cc39b9f85a8e5f53500575daf4b20468ca02f423292a0a0a7f4a33050eccd2e356e5ab238426e2118965d553236d9d721f643db3b73d5614b6f430cff3552128c190e690a2f4b490285986065479b4b4229305b28a8263435ab713bc576d5861e2fa6b102f04abc522541ee42f8d77bb0242d70475ecbbee0757dbfecd67b0d41b736b5dde846270a9c3759f39cc0ed13b33cedd39a229147dbb133cc66c9605da2f4bcd70773c04ef888570dace4dce2c618e01b21d644d7aca497a64f903c1da5ddfbe7ad0d0220b05c3245d894d82f6279b4772378778215bb287d2d742787a31590e160f14f47033893622f3fa0438d9e7544854e4ab64ce00a0a60e800452a55bdd7305a6c254c34d5b424b0d9eeab49bc30d175834a5ea5953f2cbe2588a1749c669f48e9f43456b909fa9bee31cd9bb0df0a91e5769e2dc1d70ca8eafbc5f8721de64567540165bb166f6256f6673bb9febef7cb504ddc25b43920e25d5d063542d309ce773432597422f9f2431eb211a28c5ddf3faa95af2c9a8f35dac947397edf4a57bb692dfe734782ed8b741fb3d0199c7243af51983b6804556b9fabd0963a3918a13b3d231a542a3c9fa1977d4e31dc48aff34df00902b9c32b58c156bc5d07acc27ab42171f0c1d547bbe47fc3464af60f07056513ae1f1d2daabec4ed4d3c8ca7bad706c049a0efe1de30f6a81dd10da31160b942764a84da5f2b64bb777d7f86f595cc1d50c9ebc1d6911a7c89965ef14fb6e760c65679e868cfa7019972dc80eaef2590cb79ca4b4891af533783a50ce553c18e058a6f58b0b6efe66</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      本文已加密，密码为虚拟专用网络的大写字母缩写
    
    </summary>
    
    
      <category term="网络安全" scheme="https://code004.ml/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="开发工作" scheme="https://code004.ml/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="软件" scheme="https://code004.ml/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="非请勿入" scheme="https://code004.ml/tags/%E9%9D%9E%E8%AF%B7%E5%8B%BF%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>如何在问卷星考试中作弊</title>
    <link href="https://code004.ml/posts/how-to-crack-wjx/"/>
    <id>https://code004.ml/posts/how-to-crack-wjx/</id>
    <published>2020-02-22T13:06:17.000Z</published>
    <updated>2020-04-06T15:21:29.606Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">同学们均已宣誓不会进行作弊，但为防止方法被滥用，文章已加密</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="096a253e125d4ed4bd58ddbd07de62fea957199dc87225da1e7b76da4bd64653">2fe11e428a3ee535cd008772d23768941018f87fd68eec108b413bbdfeb8f0b9f2fd161919de20843ae226a4ee2fa448d34dfdc5c6a4c537b790a8c833d7f932a34cfbd61634a9ed47664033ee0bfa7b35aeb2862a8643d700d30ed8ae580165a1d2dd1b86303c162a5df33175013c392e54bf4e1c920078a30a840e8cdff66a77132c424119f63687eb3418b99fc01fa23bbb1f1d5223ff8968d0b073dbd80f0f18b7a2e1149866e9fb7f2fa6c33535a34f89caaa61ba5554409c36673fb77a48b8c0bd2fec818604fd0954ed7994253d6c6fd3df27c6c4eba093d7f98b485f7246d3b68d8175ecc82c156370f38fd49101ceb67219e566c14d3a8bf62e197bdaf59069f21a3451ae5954cf5be25f2b212eeece729c0344a8fa7c23d96f04d4ba594d627f30cb0af3f4db87e87b824050a23c84ca0cd722beccece2d9e3412a3657e2c6c3ceef1d6ceff465d7737df3375d82808dc1a71530479db6967e204ec150512f5a4cf701fa4da00db86113712c203f943d77b3188a8ae3df65c93834761c697f8ad53d76bf930fe51ca97d5e88d84d87ff3c79d71815dc7931fd6aad5ba6a7c21ce0824f3e55307ef63f74af409270f37a26f44f28ea67b574ac73e8b14d13aeab4f7649f7f8c1b7288a5df0e267af74b11fb77a418f7cba9a294fd23e76e4c89e6898b68b2d2462f35ab861a6d0ee492722e4f49a15fbdac81ea3e9c3bca024ede9216bb364bbff96bd386bb55efc8b12f8da84c9b07efeae8112cf1c931610dcdebf8eab4ddf42889220fa5f42a32c405b3d95a71eb87c71f7582377e130ef658b36ed7013ab39e8b2260dfdcf496f0970a376fc0c4f7ddfdb7cacb07823adbadf2efc5926c79714c9296e447f3d7ee3ba3f97d8da3ee3c3e6d45f9ab7be4164e3769d0da3d1735e240b33567a66104dca0afc03a7870fe2bd716b5df086873748dee4e62cbf9e5b0471856abbd7dd0741f4b554350cfdc43c229c686d6bd30478feaaa42f2d47aa62a176cc3b5ac5f887b2966252ec5bcbeada6d5520723a30e67a1f954a36a4d3e355a3c53fe1b1f8bb35d90f486647ba48e49a8604c8086070ae3493fc5f2b2402b1a4ae4a86a7cd6f55ca57f2de42667a8697c6dd08bb6aeaa9ac651c30abdf0053bcc5446910cae3455ab830af7df68dc147970c131ec1159d384bb1a8c62d6fa785a1b36226628be3311359709fecba0cfccec22473bd8fbfa9a503fb9dac491027e0773ddf23086a34a2fd9fae9f2c0b28cf1a9c61916bb30d8df9c9701d04b32820a203495b4f14d08df806334e23341e84330ef86388e9632e00157da72c443bae13e40e044c00d1c7421ad5187507eb2f1666318653bbbe4bd8b8c3e6ba4da06b9134971712a220ea76fc5e17bde6fe05c65ef01c214eb66c661738fcf33f4d2038903506e3d0f1e986187164b68d1f25d8e93649819e2f8194f84d3e37dcb7327edb7207ed3a09573de703169383f53cb12ab680948734018e920d687047b3a5427cdbe6aee50f40d00610ee7cc2f743c50e58981e4cd133e33680bfc818ff4d6a3bfd7fd0b75824fbaef281e2defbfa61cc5f1910fbff51501457b7df87f4a8a08f49ff4e1170013a97c617f1cd4bc8fd4357f209e2b2f2d5235babb222e6f9f1a6b0c5199edcf55f3721f6d9bf2cd58b9414dc1bb7d843085befdb61dfe402eb04b25c9f30901c71ac7eeda4fee81ecbed8b6b993120f16e81028b7f9fc8cd1798196c82bf472005862f342d7dcbc09a0362751b4a56a87bd2404608e13e1d7de2f8468d0ee87f8766405b2ca89c1ce85411af0710537e0fcdc034070e4cba2307a69b3a9e0c03c9caa0b6e81f8f9e9038513963b170af70d19561bdcebabe816fdd6e376227a0a1e5601df94bd7a9d43fddc6162f09bfaef43ec7ceb974770c9b2d284429b7d46995eb12c495c75172a71440fb7b549191dccadbd8dc4151236dc593bef7e0a45b77ad40266591253982ec49300b7af3882e575dce413123fb22c376803558981ce008e1340f83f6f9d7e7036809ffe707c66d512a480230ea8ad6887dfa6ee44c38e9bf79a925d5303dfb031d762235d37f4ddf0f6469efe7cc847df095e1a60da61c1adefe779d50a25d417d5063e099760c1df79f128bf4889bfc346faeea12d6a669a4b466132ab6a4a7be20300423b3fc3accb0a7d6e17ec7a9df61ce2537b15f11b99690ffe883b6f6ee945b56a06f198d7b062b77c129779d5741902834303e045df803bd65abb8cdb358b4a546a7dc0bc72e3213ba02931ccba3fc82784c4261b7a5407eaf2a12952b3a7bb0545eb187889e10cad5eb0983aaf941a4652bbc524aa0f04fa21c7dad80081458f325a74b0a4c1d357bd71ebb8ea08d3e7a105fbcaa548340938c58818c53253917fff5d2db619d44f2207d10073292d0a19c6621d82342fbcf7a4dd942c4e5624a77abec43bc752b379c9e8d019a5f45467629b2da7f6fdb70b4040d9e315d3b3893c8f5cd2dfe06745474ae66075ec4900594f3881cf2b54086f4348c11c3922efbc34951bbd8091ff75c0dc2525e875ff03e4f53dd9201be3556fc7489afa38c4cbc7d3fb5a9b93b6d3ca3a63b8f62c86c4741e25552b4e42f8eb5f3c3378b9f7cd46c25bfbde023c4226227f2cc911a174b885f8a18882c0dec47e3e9989e915227ed3dc834ae384141bcdb4353b588b54e9152dd3e7e4c3521dfca2b8b070f51e9af5feccf3951bfdb823cc19b1da328ff21fb0a80a402d079a0fb8e308cddb036d8d4ef26e9b41a3613dcf47ed1d4282dbcb329b034941ca0630a5c01004fd9501e07bb975c0bc4e269014c465f8e20be02606eeac42e77815d71c4b59d852c95598024f8d748110a6a2593f63cdc102b5793698608cfcbb66607d241ad2db5c0f5b58c5ab50af5fb027358eae0b59448febac72544a0ca8cb6b079a6e66c6119d6197112151fea2ee56a158cabaed6b100b47ef6edd973ba82fbe92bb88be1887afe1980d40b8d5dccca51dc79722b3b0c83c69314c6e8c15cb332ce72deadebbfcaa06368b851fc3f4c516bb26334f43552bca939e49e48eba846ead0364d7b453d1f083d16ae6d382449490afb3f928f68266c1f575617989db2151892a5c18cacde382db16d49e677352a1a02958075682ed4a14dec37b76b41f02ad3cf260a2e235e55f349126cbf3854dc65757827ec7de92eeee75f3fc9642decb9753ec79823af50a274c7b471fb9b75276ecc8a5ec4576dd23ac43e349ac51399eae161136d8d2f0d85229017d988c43e735d9f61ad37fee0af622f0850cb382290fdff3de4c4e213321bf7307eb35a22afb88d1d38a58e993e8cf5590c29a69b80f75fd60d0d54507361a2ddb3638b4f7ead2b9a26199258a318c5bd7cdd2c03d334a535bd7cc7ba80e086c89e84c274b4f351374c61</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      本文已被定时自动销毁
    
    </summary>
    
    
      <category term="教程" scheme="https://code004.ml/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="学校" scheme="https://code004.ml/tags/%E5%AD%A6%E6%A0%A1/"/>
    
      <category term="非请勿入" scheme="https://code004.ml/tags/%E9%9D%9E%E8%AF%B7%E5%8B%BF%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>对一个Pull Request的回复</title>
    <link href="https://code004.ml/posts/reply-to-a-pr/"/>
    <id>https://code004.ml/posts/reply-to-a-pr/</id>
    <published>2020-02-19T22:49:31.000Z</published>
    <updated>2020-05-25T13:34:41.269Z</updated>
    
    <content type="html"><![CDATA[<p>近几天不知道为什么一直感觉情绪比较失调，昨天看到这个去年八月份去插了一句嘴的PR，气愤感油然而生。由于Repo Owner好像已经锁帖，故在此回复：</p><p>PR链接：<a href="https://github.com/getlantern/lantern/pull/8347" target="_blank" rel="noopener">https://github.com/getlantern/lantern/pull/8347</a></p><p>回复对象：<a href="https://github.com/han814992037" target="_blank" rel="noopener">@han814992037</a></p><a id="more"></a><p>首先，这位仁兄和其他几位一起在Issues里面骂人，随后开发者关闭了Issues，然后我找Lantern的错误时发现他们又在PR里面at开发者来骂。</p><p>好吧，说老实话，我TM就不应该进这个PR。我进来就回了一句话（因为他骂人是用<code>f*ck</code>来的，我一开始以为他不是中国人）：</p><div class="hljs"><pre><code class="hljs applescript">Excuse <span class="hljs-keyword">me</span>, dear sirs/madams,Issues <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">for</span> you <span class="hljs-keyword">to</span> <span class="hljs-built_in">say</span> such bad <span class="hljs-built_in">words</span>.</code></pre></div><p>（好吧我写错了是PR）</p><p>随后…</p><div class="hljs"><pre><code class="hljs erlang-repl">FUCK your mom!!!money-back!!!!!!!!FUCK your mom!!!money-back!!!!!!!!FUCK your mom!!!money-back!!!!!!!!FUCK your mom!!!money-back!!!!!!!!FUCK your mom!!!money-back!!!!!!!!</code></pre></div><p>好的，我能理解你的心情，Lantern付钱然后连不上并不是一个typical的问题，因为就我所知，VxN付款后连不上的不计其数。就好比拿你的电脑去连接一个一直在变的服务器，你的网络的变化和蓝灯服务的变化还有zf因素都可能导致效果的180°大转变。况且，你F*CK找我干什么，找开发者啊…</p><p>于是我继续回复：</p><div class="hljs"><pre><code class="hljs pgsql">Dear sir, I sincerely understand your anger.I <span class="hljs-keyword">also</span> know that Lantern <span class="hljs-keyword">is</span> somehow cheating peopl<span class="hljs-string">e's money.</span><span class="hljs-string">But please note that Github Issues isn'</span>t a place <span class="hljs-keyword">for</span> you <span class="hljs-keyword">to</span> express your feelings through bad words.<span class="hljs-keyword">If</span> you really want <span class="hljs-keyword">to</span> say bad words, please send emails <span class="hljs-keyword">or</span> private messages <span class="hljs-keyword">to</span> the developers.Thanks <span class="hljs-keyword">for</span> giving me a chance <span class="hljs-keyword">to</span> speak. Hope <span class="hljs-keyword">no</span> more bad words will appear here.PS: Would you mind learning <span class="hljs-keyword">some</span> Markdown skills <span class="hljs-keyword">before</span> fucking me???Go here <span class="hljs-keyword">to</span> <span class="hljs-keyword">read</span> more</code></pre></div><p>（好吧我又把PR写成了Issues…）</p><p>然后另外一个人又跳出来：</p><div class="hljs"><pre><code class="hljs plain">我们作为顾客，给了你信任，反应了问题，但是你们呢？有任何反馈吗？我也是开发者，我自己的顾客有问题的时候，也会第一时间反馈，但是你们长时间累计的不反馈，不理会你认为大家发火不合理？我是英文烂，但是又怎样呢？顾客需要练好自己的英文才能反馈？我用英文跟你沟通还不是因为以为你是英文开发者？所以我为你的“方便”，你却没有看到问题本身，我们需要的是连接正常稳定的VPN，跟你骂有意义？</code></pre></div><p>好的，我再重申一下，我TM真的不是开发者…</p><p>遂回复：</p><div class="hljs"><pre><code class="hljs stata">首先重申一下，我与这个项目没有任何关系。我不是他们的开发者，也不是顾客。我只是今天晚上浏览VPN的时候看到了而已说实话，作为一个GA开发者，我认为您的语言有些不合理。您的顾客？我只知道我的所有项目全部是免费的，其中大部分还是开源的；VPN不是说好就能好的，它不像一个游戏或者一个工具程序，不是说有Bug就能修的。甚至有可能你这里不行，他那里可以。在这种情况下，根据开发者自愿遵守的相关规定，他完全可以无视你的Issue与<span class="hljs-keyword">PR</span>我认为Latern的开发者也不至于那么猥琐。至少，他们完全可以把这个<span class="hljs-keyword">PR</span>给删掉或者关闭<span class="hljs-keyword">PR</span>板块。他们没有这么做，说明他们并没有那么坏。您们可以发火，您们可以骂人，但请不要玷污了Github。这是一个开发者讨论交流的社区，不是一个开发者和顾客到处骂来骂去的社区。您认为您用英文与我沟通是为了我的”方便“，我可以说我开始的时候和您沟通是为了广大Github用户的”方便“，而且我现在用中文与您共同也是为了您的”方便“，很明显在你代码打多了的时候，英文比中文输的更快。关于您的”顾客需要练好英语才能反馈“观点我表示极不赞同。我的几个项目支持所有语言反馈，我还有一次收到一份日语的BUG报告，我还不是丢到Google <span class="hljs-keyword">Translate</span>里面看，然后再回信，翻译成日语，发给他您如果需要正常稳定的VPN，只能说您智商（或者搜索技能）不过关。很明显Lantern比赛风差得多，一直以来都是如此（至少我用的一直是如此，当然我并没有购买<span class="hljs-keyword">PRO</span>），还有FreeVPN，一直以来Google Youtube Twitter从来没卡过，也是1s连上，永久免费。顺便问一句，您平常开发使用的是哪种语言？我不太相信有英语不好能编好代码的语言以上，我不是对您不尊重，而是您需要更好地弄清楚我和这个项目没有关系。还有，您的措辞真的让我觉得开发者，或者说，程序员这个称谓收到了玷污。</code></pre></div><p>然后前面那个人又出来了：</p><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>你是干啥的和我俩没有半毛钱关系，你是联合国秘书长，都与我无关！你要不来这里放屁，我不屑于和你这种傻屌浪费时间。<span class="hljs-number">2.</span>我们信任，是因为已经用过一年了，人家有官方网站(发表意见，都不事先考察一下吗？！)<span class="hljs-number">3.</span>我们是花钱买的服务，你和我们扯自己破解？什么狗屁逻辑（你这种逻辑能力，怎么混进开发行业的？！）<span class="hljs-number">4.</span>我们用什么VPN有自己的选择能力，轮不到你来指手画脚！你所列举的稳定性，速度，相差甚远！<span class="hljs-number">5.</span>你要举报我骂人！？好！我草你妈！疯狂的草你妈！你个狗杂种！你妈死了！我操死的！<span class="hljs-number">6.</span>你刚才说，如果技术够能够直接破解PRO，怎么这会就不是说好就能好的！？有可能这里好，那里不好？这你还有点说到点了，之所以来这里，就是要看看都有那些坐标，是不能用的。<span class="hljs-number">7.</span>你认为的！？那仅仅是你认为的！我们没有讨论他坏与不坏的问题！我们骂他是因为两个月以来一直默不作声。<span class="hljs-number">8.</span>玷污Github！？高雅不是装的，孙子才是装的！你就是那种装孙子的东西！（是非因果，没搞清楚，就来装圣人，假装劝架！你这种是要遭雷劈的！Lantern有报告问题的，在座的所有人，都不止一次的报告过问题，但是，一律石沉大海。遂来此......）,所以，我断定，你连最基本揣摩用户行为的能力都没有，就直接下断言，你这么垃圾的逻辑能力和分析能力，是开发人员！？走后门的吧！<span class="hljs-number">9.</span>本地的中国人，英文打的再多，也不能比中文输入快，这是常识！你个傻逼！<span class="hljs-number">10.</span>仔细看看那哥们的意思，他可没说顾客需要练好英语，才能反馈，你说你是中国人！？杂交的吧！！！这你都能理解错！忘本了吧你！！！<span class="hljs-number">11.</span>你一个用赛风，FreeVPN的，大家不是不知道，你说稳定！？我只能呵呵了.....睁眼说瞎话，就是你做人的根本吧！<span class="hljs-number">12.</span>你说你是开发者，不知道开发最重要的是数学吗！！！？？？英语不好就编不好代码？你是从业人员吗？<span class="hljs-number">13.</span>我觉得你从始至终强调自己是开发者，才是对整个行业的玷污！你这逻辑能力，真的不像是开发人员！一个刚刚说完自己取消订阅，还出来，扯这么多的狗杂种，出尔反尔如此之快！？你有脸说自己是中国人！？最后你不是要去举报我吗！？我担心你没有证据！所以给你点证据，请看以下：我草你妈！Fuck your mom ！ 我草你妈！Fuck your mom ！ 我草你妈！Fuck your mom ！ 我草你妈！Fuck your mom ！ Shot to your mom<span class="hljs-string">'s face!</span></code></pre></div><p>现在进行官方的回复：</p><ol start="0"><li>之前我对您是一条一条回复的，如果您还要继续，也请按照我的序号来；</li><li>十分抱歉，我跟不屑与您这种啥都不懂的浪费时间。哦另外，如果我是联合国秘书长，您可能死哪了都不知道；</li><li>我随随便便都可以搭个网站，再绑定一个低价域名，就比如这个blog，除了域名花了几个钱以外，我一分钱都没花；</li><li>我谈到破解PRO版本就是因为您之前质问我：“有本事你破解啊，反正老子是花了钱的”，相关评论已被删除所以证据可能找不到；</li><li>我只是在向您推荐，并没有“指手画脚”呢。另外，VxN这个东西，或许确实我连接时比较快，您连接的时候就慢了，这也不是我的锅，就当您RP不好呗；</li><li>谢谢您提供充足的证据呢；</li><li>VxN很明显会有很多IP会不能用，这点可以说是我之前知识上的某种匮乏。总之，一个明摆着的事实就是，一个IP被zf操作封了以后，基本是不可能解封的，所以很明显IP需要不断更新，而之所以您来骂人不就是因为已有的IP都不能用了吗？我前面说到了，网络环境和网速也是重要的因素；</li><li>好吧我不太清楚您在说什么，反正我认为我在回复时已经完全搞懂了您的问题。毕竟，我可以告诉您的是，您完全没有分析能力，您之所以骂人是因为您遇到IP无法连接的情况并进行了反馈。然而，Lantern开发者在两个月内都没有对您进行反馈，所以您变为一种硬性、强烈而极端不合理的要求：<code>money back!</code>；</li><li>我可以告诉您，您的行为就是在玷污Github，同时还滥用了PR板块的功能。我不太能理解“装孙子”的意思，或许是因为我很少骂人；</li><li>对不起，我英文打字就是比中文快。看您英语的能力，加上您如此的叙述，我其实非常吃惊：您难道是用易语言开发的吗？英语不好还能当开发者？抱歉我无法理解您的意思；</li><li>好吧，我理解错了，您满意了吧，回复的时候有一点偏激。不过话说回来，您的回复里类似的语言多到我都数不清呢；</li><li>我用免费的VxN确实够了，速度也够快，流量我也不需要太多。话说您需要这么多流量和这么快的网速干什么？普通的查资料都够了，只是不能看Youtube的视频而已（其实也不确定，有些时候Youtube也可以看）。另外，实在不行用IDM下载Youtube的视频离线看也不是不可以啊，只是需要多等待一会而已；</li><li>抱歉我不是从业人员，不过我或许比您更清楚数学基本功的重要性，但是看您说话没调理的样子，就问您数学好吗？另外真正能锻炼思维能力的是数学竞赛、物理学竞赛等高中竞赛，说老实话课内科目都不太能锻炼思维能力。上面已经讲过英语的重要性了，不再过多叙述；</li><li>首先，我并没有自始自终强调我是开发者。其次，开发者真的需要时时刻刻使用VxN吗？如果要Google，直接用chrome的“谷歌访问助手”插件就可以完美解决。我估计您是要办公休闲时候看Youtube视频吧，那请问您英语不好又怎么能理解呢？另外，Lantern如此昂贵的服务，远不如自搭服务器SSR来的快、来的便宜。由此可以很明显的看出您开发能力和语言能力都不过关。</li></ol><hr><p>一句话：个人认为您跟那些在其他国家公共区域大喊CNMB的中国留学生没什么区别。</p><p>您可以认为我是“狗杂种”，反正我是实在搞不懂您。毕竟，下载使用甚至还购买了Lantern这样VxN的，可以认为每天都在违法，从您的叙述中您“试用了一段时间”，然后还购买了至少两个月的VxN，说句不好听的，您可能都已经被公安机关记录在案了。像您这种不知廉耻的人，自己作为一个天天违法甚至犯罪的公民，还好意思指责他人“没脸是中国人”，我认为，或许您才没资格做中国人吧！尊重血统的，魔法世界只有Slytherin，现实世界中肯定也少之又少，而您名列其中。祝好！</p><hr><p>哦对了，无意中看到您之前的评论：</p><div class="hljs"><pre><code class="hljs groovy">&gt; 一直都没稳定过都别用它了 ，这帮狗比，跑路了，操他们妈的，一起<span class="hljs-string">https:</span><span class="hljs-comment">//twitter.com/MeiGuoCanKao/status/1143909860515483648 去twitter上，骂这帮狗杂种！！！团结起来，争取让媒体，都知道，那样，还有退钱的可能！！！</span><span class="hljs-string">https:</span><span class="hljs-comment">//twitter.com/MeiGuoCanKao/status/1143909860515483648</span><span class="hljs-string">https:</span><span class="hljs-comment">//twitter.com/MeiGuoCanKao/status/1143909860515483648</span><span class="hljs-string">https:</span><span class="hljs-comment">//twitter.com/MeiGuoCanKao/status/1143909860515483648</span></code></pre></div><p>终于懂得了您存在的意义。您用来欺骗和诱惑他人的方法很简单：非法利用国外的社区来对国内的一个人或一个企业进行打击，并主张“团结”。我之前写的没错，您就是大喊CNMB的，利用非法手段来让国外的媒体和个人以为某个东西是引起了公愤的。但是，这无疑是对国外社区的一种污染。</p><p>我不说多了，毕竟我还是比较怕国内媒体和舆论的围攻的。您就自重吧，最好也别把我丢到国外媒体上去骂。毕竟就国外而言我的关系还是比您的稳定得多。</p><p>另外，此人在此PR中还有许许多多的言论，他自己都说过“免费的自由门都能用”，自相矛盾，我也真的无语了… 还欢迎各位在这个PR里找这样的人，找到了麻烦回复一下。</p><p>我也就不喷那么多了，当今时代人人都有事做，再一次祝好！</p><p>附赠截图：</p><p><img src="/posts/reply-to-a-pr/screenshot.png" srcset="/img/loading.gif" alt="Full Page Screenshot"></p><p>下面是本文中提到和部分未提到的重点内容截图：</p><p><img src="/posts/reply-to-a-pr/proof1.png" srcset="/img/loading.gif" alt="Proof 1"></p><p><img src="/posts/reply-to-a-pr/proof2.png" srcset="/img/loading.gif" alt="Proof 2"></p><p><img src="/posts/reply-to-a-pr/proof3.png" srcset="/img/loading.gif" alt="Proof 3"></p><p><img src="/posts/reply-to-a-pr/proof4.png" srcset="/img/loading.gif" alt="Proof 4"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近几天不知道为什么一直感觉情绪比较失调，昨天看到这个去年八月份去插了一句嘴的PR，气愤感油然而生。由于Repo Owner好像已经锁帖，故在此回复：&lt;/p&gt;
&lt;p&gt;PR链接：&lt;a href=&quot;https://github.com/getlantern/lantern/pull/8347&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/getlantern/lantern/pull/8347&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;回复对象：&lt;a href=&quot;https://github.com/han814992037&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@han814992037&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随记" scheme="https://code004.ml/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="非请勿入" scheme="https://code004.ml/tags/%E9%9D%9E%E8%AF%B7%E5%8B%BF%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 快速安装指南</title>
    <link href="https://code004.ml/posts/how-to-reinstall-windows-10/"/>
    <id>https://code004.ml/posts/how-to-reinstall-windows-10/</id>
    <published>2020-02-10T06:09:06.000Z</published>
    <updated>2020-05-25T13:33:14.529Z</updated>
    
    <content type="html"><![CDATA[<p>之前在一篇关于Visual Studio安装的文章里提到换过一次系统，前几天又换了一次。</p><a id="more"></a><p>我用的是台Lenovo的笔记本（LENOVO ideapad 300S），买的时候预装了家庭中文版的win10，后来越来越不顺手，C盘内存告急，所以我找YBW借了个U盘重装了“精简版”的win10 Enterprise S，由于是精简的，所以禁用了更新和各种功能，并且企业版没有应用商店，即使是用特殊途径下载安装了应用商店也十分不方便，下载的闹钟和时钟（Win10自带应用）到时间居然不会提醒！！！再加上C盘内存再次锐减无法处理，并且为了干掉那盗版系统配套的2345的猥琐导航和近期出现奇葩驱动错误蓝屏，我决定重装电脑，而且一定要装正版的。</p><p>于是，我经过搜索，查到了下面的界面：</p><p><img src="/posts/how-to-reinstall-windows-10/google-win10.png" srcset="/img/loading.gif" alt="Google Win10"></p><p>我十分高兴！居然微软精心给出了win10 iso的下载链接！</p><p><img src="/posts/how-to-reinstall-windows-10/media-downloader.png" srcset="/img/loading.gif" alt="Win10 Media Downloader"></p><p>欸？肿么没有了？肿么只有一个下载工具了？</p><p>我尝试下载了介个工具，然后花了几个小时，结果出现错误:( 重试了一次还是同上。再者，我用这种方式根本无法更换Windows版本！肯定企业版升级了还是企业版…</p><p>后来，我发现了一个奇怪的地方</p><p>为什么Google的蜘蛛爬到的是个ISO下载界面呢？会不会跟系统有关？媒介工具是exe文件，肯定只有Windows系统能运行，那么如果我是MacOS或者Linux用户呢？微软肯定不会放弃这个赚钱的机会吧，不可能连个下载链接都不给吧</p><p>于是，我点击了Google的网络快照</p><p><img src="/posts/how-to-reinstall-windows-10/download-iso.png" srcset="/img/loading.gif" alt="Download Win10 ISO"></p><p><img src="/posts/how-to-reinstall-windows-10/before-you-begin.png" srcset="/img/loading.gif" alt="Before You Begin"></p><p>这不就是我想要的吗！</p><p>于是我快速地选择了版本，点击了Confirm，然后出现了下面这句话：</p><blockquote><p>Validating your request. This may take several minutes. Do not refresh the page or select back, doing so will cancel the request.</p></blockquote><p>然后网页就卡住了…</p><p>我灵机一动：如果我在手机上访问呢？我尝试了一下，果真有了ISO下载页面</p><p>这样的话…我想到了Chrome内置的手机模拟器</p><p>对了，就它了！</p><p>使用“手机”打开并刷新后，我们看到了下面的界面：</p><p><img src="/posts/how-to-reinstall-windows-10/phone-iso.png" srcset="/img/loading.gif" alt="Phone ISO"></p><p>Awesome!!!</p><p>版本那里选择Windows 10（当然了如果你想要家庭中文版也可以，不过那就没办法换语言咯~）</p><p>下面会出来一个语言选择，选择你想要的语言（不过其实也无所谓，因为后面可以改的）</p><p>有简体中文，也有英语的，都可以选择。</p><p>选择完后，等待片刻，出现一个让你选64位还是32位的界面（注意下载链接仅12小时有效），选择，开始下载即可。</p><p>文件大小5G多（根据语言不同而不同），用IDM下载速度大概12M/s，总耗时大概在10mins左右（这里网络环境一般），如果不够快可以设置32线程。</p><p><img src="/posts/how-to-reinstall-windows-10/downloading.png" srcset="/img/loading.gif" alt="Downloading"></p><p>等待下载完成后（上面截图是下载的简体中文版，我当时用的英文版），把它放到一个非系统盘的文件夹里，建议单独建一个，比如这样</p><p><img src="/posts/how-to-reinstall-windows-10/iso-file.png" srcset="/img/loading.gif" alt="ISO File"></p><p>接着，使用像U深度这样的U盘PE写入工具，并选择一个U盘（并将你的数据备份到一个非系统盘，因为你的U盘会被格式化，而安装系统时你的C盘会被重置）</p><p>接着，百度一下你的电脑进入BIOS的方式，比如我就需要百度：</p><blockquote><p>联想笔记本如何进入BIOS</p></blockquote><p>获得快捷键后，重启电脑，在出现品牌Logo时迅速并连续地敲击那个快捷键</p><p>接下来因为各品牌不同，所以请自行百度：</p><blockquote><p>联想笔记本如何U盘启动</p></blockquote><p>（请把<code>联想笔记本</code>换成您的电脑品牌）</p><p>学会了以后，进入PE安装系统，像U深度，你进入后选择你*的ISO文件并还原即可，此过程大概耗时5~10分钟</p><p>完毕，重启，<strong>拔掉U盘</strong>，进入系统设置界面</p><p>中文版我不知道，反正英文版会有Cortana很耐心地帮你提示。至于激活，如果有类似于我没有激活码或者稍后激活之类的选项就选，实在没有就用手机买一个呗 <del>也可以直接百度Win10家庭版激活码，然后直接填进去即可</del></p><p>我是因为笔记本本身自己带了家庭版的系统，然后之前我登录了微软账号，所以我的license直接跟我的账号绑定了。安装过程中我登录了微软账号，所以就直接自动激活了，反正我设置里是这样说的：</p><p><img src="/posts/how-to-reinstall-windows-10/activated-digital-license.png" srcset="/img/loading.gif" alt="Activated Using a Digital License"></p><p>总之，安装过程按照屏幕上的来操作就行了，注意：</p><p>如果出现那种纯色背景一串白字然后转转转的，提示什么正在准备Windows的，<strong>不要按照网上的某些方法强行关机</strong>，否则可能造成你白干了这么久。除非等待时间超过3~5小时，并且你需要尽快使用电脑，否则不要不要不要强行关机，按照屏幕说的做。</p><p>重启后，在设置中安装一些更新和驱动并重启，即可了！！！</p><p><img src="/posts/how-to-reinstall-windows-10/win10.png" srcset="/img/loading.gif" alt="获得成就：成功安装正版Windows 10！"></p><p>另外，最新版本的Windows的Cortana非常高级哦~</p><div class="hljs"><pre><code class="hljs routeros">- Hey, Cortana. Open Google Chrome.- Sure, opening Google Chrome Canary<span class="hljs-built_in">..</span>.- Hey, Cortana. Cancel my alarm clock.- Cancel your alarm<span class="hljs-built_in"> clock </span><span class="hljs-keyword">for</span> what time?- Three Forty P.M<span class="hljs-built_in">..</span>- Sure.</code></pre></div><p>简直比Siri还高级！</p><p>好了，本文到此结束了，博主也该睡觉了（当前时间12:44 A.M.），有什么问题欢迎在文末处留言，涉及隐私的问题也可以直接发邮件到 <a href="mailto:code004@qq.com" rel="external nofollow noopener noreferrer" target="_blank">code004@qq.com</a> 哦！</p><p>Thx for reading!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在一篇关于Visual Studio安装的文章里提到换过一次系统，前几天又换了一次。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随记" scheme="https://code004.ml/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="系统" scheme="https://code004.ml/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="搭建" scheme="https://code004.ml/tags/%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>关于新型冠状病毒的公告</title>
    <link href="https://code004.ml/posts/notice-about-2019-ncov/"/>
    <id>https://code004.ml/posts/notice-about-2019-ncov/</id>
    <published>2020-02-01T06:48:52.000Z</published>
    <updated>2020-05-25T13:32:45.001Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，近期武汉疫情严重，已于1月23日封城。为了响应世界卫生组织的号召，减少群众聚集活动，现给出下面公告（原发布时间应为1月23日，由于意外导致博主不能使用电脑，故延迟至今日发布）</p><h1 id="关于新型冠状病毒的公告"><a href="#关于新型冠状病毒的公告" class="headerlink" title="关于新型冠状病毒的公告"></a>关于新型冠状病毒的公告</h1><p>2020.02.01 14:48:52 公告作者：code004/code004Accepted</p><p>考虑到武汉疫情的严重性，现经博主思考决定，开发团队商讨，公布以下关于GC Server的公告：</p><ol><li>取消GC Server项目发布会，本次发布会内容与下次合并；</li><li>延迟第三届全国青少年网络安全专题研讨会，时间另行通知；</li><li>取消GC Server新年欢庆特别区域，改为聚焦疫情特别区域；</li><li>将在线新年直播活动取消，改为一个简单的仅拥有2020新年倒计时的画面（并在Github上开源）；</li></ol><p>感谢理解，如有疑问请联系 <a href="mailto:code004@qq.com" rel="external nofollow noopener noreferrer" target="_blank">code004@qq.com</a> ，谢谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;众所周知，近期武汉疫情严重，已于1月23日封城。为了响应世界卫生组织的号召，减少群众聚集活动，现给出下面公告（原发布时间应为1月23日，由于意外导致博主不能使用电脑，故延迟至今日发布）&lt;/p&gt;
&lt;h1 id=&quot;关于新型冠状病毒的公告&quot;&gt;&lt;a href=&quot;#关于新型冠状病毒的
      
    
    </summary>
    
    
      <category term="公告" scheme="https://code004.ml/categories/%E5%85%AC%E5%91%8A/"/>
    
    
      <category term="GC Server" scheme="https://code004.ml/tags/GC-Server/"/>
    
  </entry>
  
  <entry>
    <title>什么？你的文章被爬虫爬了？</title>
    <link href="https://code004.ml/posts/what-to-do-if-posts-are-copied/"/>
    <id>https://code004.ml/posts/what-to-do-if-posts-are-copied/</id>
    <published>2019-12-13T11:52:56.000Z</published>
    <updated>2020-02-01T06:55:01.624Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning">警告：本文是作者于极度愤怒中写下的，部分语句可能有失偏颇，请自行辨别！</div><a id="more"></a><p>在12月11日，也就是前天，我闲着无聊，百度了一下我的项目—GC Server</p><p><img src="/posts/what-to-do-if-posts-are-copied/baidu.png" srcset="/img/loading.gif" alt></p><p>然后我注意到了第一页的第5个搜索结果，叫做使用C++制作GC Server过程详解，内容来自脚本之家</p><p>嗯？脚本之家？我没有在里面发过文章啊？</p><p>打开一看</p><p><img src="/posts/what-to-do-if-posts-are-copied/halfpage.png" srcset="/img/loading.gif" alt></p><p>嗯，弄了一整页广告，然后作者还是wellwill！</p><p>内容完全一样，明显是直接复制的</p><p>结尾处写到：“原文链接：<a href="https://www.cnblogs.com/petewell/p/11588761.html”" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/petewell/p/11588761.html”</a></p><p>没错，脚本之家是转载的，但不是转载我的，是转载别人转载我的！</p><p>我难道没注明禁止转载？我检查了一下，好得很啊</p><p>我难道没设置复制时提醒？我测试了一下，firefox chrome ie都好得很啊</p><p>那怎么解释？</p><p>不用解释，你的文章是被爬了</p><p>当然了，我的这篇更搞笑，是有人转载了我的，然后被爬了，然后转载的人又自己删除了（或许是看到了我的声明）</p><p>真有意思</p><p>于是我在LG发了这个讨论：<a href="https://www.luogu.com.cn/discuss/show/175867?page=2" target="_blank" rel="external nofollow noopener noreferrer">求助：侵犯版权事件如何解决？</a></p><p>（然后kkk竟然亲自回复了orz</p><p>然后我又辛辛苦苦找出Commits链接：<a href="https://github.com/code004Accepted/code004accepted.github.io/commit/32c1162aff110d01777ea6cb73cbb665483aa250#diff-80a60275b6f1846819b5c2e3f55402a0" target="_blank" rel="noopener">https://github.com/code004Accepted/code004accepted.github.io/commit/32c1162aff110d01777ea6cb73cbb665483aa250#diff-80a60275b6f1846819b5c2e3f55402a0</a></p><p>好了，证据充足，发邮件！</p><blockquote><p>2、(脚本之家 jb51.net)上的所有提供下载的软件和资源均为软件或程序作者提供和网友推荐收集整理而来，仅供学习和研究使用。如有侵犯您的版权，请联系我们(QQ 461478385 或 邮箱 <a href="mailto:admin@jb51.net" rel="external nofollow noopener noreferrer" target="_blank">admin@jb51.net</a>)，本站将立即改正。</p></blockquote><p>邮件原文：</p><div class="hljs"><pre><code class="hljs angelscript">尊敬的脚本之家管理员：您好。我是GC Server的项目总创始人兼开发总监code004（或称code004Accepted），我的博客网址是 https:<span class="hljs-comment">//code004.ml</span>昨日我在百度搜索GC Server时，发现您网站的一篇文章，地址如下： https:<span class="hljs-comment">//www.jb51.net/article/170874.htm</span>文章更新时间为<span class="hljs-number">2019</span>年<span class="hljs-number">09</span>月<span class="hljs-number">26</span>日 <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">39</span>，作者为wellwill然而，经过对内容的仔细核对，我发现，本文内容完全转载于我的博客，原文地址： https:<span class="hljs-comment">//code004.ml/posts/make-your-own-gc-server-with-cpp/</span>此文章与我的文章仅标题有两字之差，而很明显我的博客中原文发表于<span class="hljs-number">2019</span>年<span class="hljs-number">05</span>月<span class="hljs-number">19</span>日，信息发布于Github上是在<span class="hljs-number">7</span>月<span class="hljs-number">15</span>日：https:<span class="hljs-comment">//github.com/code004Accepted/code004accepted.github.io/commit/32c1162aff110d01777ea6cb73cbb665483aa250#diff-80a60275b6f1846819b5c2e3f55402a0</span>Commits是无法作假的。上述网址中可以明显看出，在<span class="hljs-number">7</span>月<span class="hljs-number">15</span>日前我就发布了该文章，因此我有充足的证据说明此文章侵犯了我的版权此非法转载的文章底部有“原文链接：https:<span class="hljs-comment">//www.cnblogs.com/petewell/p/11588761.html”字样，此链接无法打开，显示404</span>由此，脚本之家（或者wellwill用户）非法转载了我的文章全文（文章底部和侧边栏有明显标记说明文章禁止转载，复制时也会弹出提示框），请您看到后尽快删除，或者在更换作者与原文链接的前提下与我进一步协商转载事宜。此致<span class="hljs-symbol">code004@</span>qq.com<span class="hljs-number">2019</span>/<span class="hljs-number">12</span>/<span class="hljs-number">12</span> <span class="hljs-number">22</span>:<span class="hljs-number">53</span></code></pre></div><p>QQ邮箱告诉我昨晚10:53投递到了对方邮箱</p><p>于是，我就等待着一封能够解释清楚这一切的邮件（与此同时浏览了几个相关案例： <a href="https://zhuanlan.zhihu.com/p/75168287" target="_blank" rel="external nofollow noopener noreferrer">https://zhuanlan.zhihu.com/p/75168287</a> <a href="https://www.zhihu.com/question/336889376）" target="_blank" rel="external nofollow noopener noreferrer">https://www.zhihu.com/question/336889376）</a></p><p>嗯，一直没回邮件，我等着</p><p>欸，怎么原文里的作者和地址改了？哦</p><p>我不是说了要</p><blockquote><p>在更换作者与原文链接的前提下与我进一步协商转载事宜</p></blockquote><p>吗？</p><p>哦，脚本之家八成忽略了？</p><p>于是，我又写了一封邮件过去</p><hr><p>考虑到此次事件影响不大且已基本解决，本文不再更新，但还是想骂一下那些抄袭他人成果的人，或者说，那些抄袭他人成果的低级生物。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note warning&quot;&gt;警告：本文是作者于极度愤怒中写下的，部分语句可能有失偏颇，请自行辨别！&lt;/div&gt;
    
    </summary>
    
    
      <category term="随记" scheme="https://code004.ml/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="博客" scheme="https://code004.ml/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>关于 CSP-J2/S2 2019 江西赛区考生代码丢失事件</title>
    <link href="https://code004.ml/posts/about-ccf-lost-source-code-in-jx/"/>
    <id>https://code004.ml/posts/about-ccf-lost-source-code-in-jx/</id>
    <published>2019-11-22T15:00:23.000Z</published>
    <updated>2019-11-23T16:07:46.465Z</updated>
    
    <content type="html"><![CDATA[<p>待更</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;待更&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="随记" scheme="https://code004.ml/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>GC Server 版本发行规则</title>
    <link href="https://code004.ml/posts/gc-server-version-rules/"/>
    <id>https://code004.ml/posts/gc-server-version-rules/</id>
    <published>2019-11-10T13:14:54.000Z</published>
    <updated>2019-11-16T10:57:18.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本规则"><a href="#版本规则" class="headerlink" title="版本规则"></a>版本规则</h1><p>GC Server自2019年12日起，版本发行分下面几类：</p><a id="more"></a><h2 id="Stable"><a href="#Stable" class="headerlink" title="Stable"></a>Stable</h2><p>Stable是稳定版，一般是针对某个新功能的更新或针对之前版本的某个Bug的修补</p><p>Stable版一般来说不会存在新功能兼容等问题，是相对来说最稳定的版本</p><h2 id="Special"><a href="#Special" class="headerlink" title="Special"></a>Special</h2><p>Special是特别版，一般在某个节日前后发行，可能有针对某个新功能的更新或针对之前版本的某个Bug的修补，但大部分时候只是更换以下封面图或者加一些节日特色栏目而已</p><p>Special版一般来说不会存在新功能兼容等问题，也是相对来说最稳定的版本</p><h2 id="Beta"><a href="#Beta" class="headerlink" title="Beta"></a>Beta</h2><p>Beta是测试版，一般是针对某个新功能的尚不能完全兼容的更新</p><p>Beta版有较小可能会出现各种Bug，建议希望体验较为稳定的最新功能的用户使用，也希望各位能将使用过程中的体验&amp;感受或Bug的反馈发送给我</p><p>总体来说，Beta版是相对来说较为不稳定的版本。您可以将Beta版理解为大范围公测</p><h2 id="Developer"><a href="#Developer" class="headerlink" title="Developer"></a>Developer</h2><p>Developer是开发者版，一般是针对某个最新功能的有极多Bug的更新</p><p>Developer版有极大可能会出现各种Bug（所以如果您想将GC Server的安装包分享给您的朋友，切记不要选择Developer版），仅建议希望体验最新功能，了解开发组下一步发展方向的用户使用，也希望各位能将使用过程中的体验&amp;感受或Bug的反馈发送给我</p><p>总体来说，Developer版是最为不稳定的版本。您可以将Developer版理解为小范围公测</p><h1 id="更新频道"><a href="#更新频道" class="headerlink" title="更新频道"></a>更新频道</h1><p>预计我们会于2019年12月~2020年2月推出GC Server的检查更新功能</p><p>预计（只是预计），GC Server检查更新会有下面几个频道：</p><ol><li>Normal: 检查更新时会忽略Beta/Developer的更新，仅检查Stable/Special的更新</li><li>Leader: 检查更新时会忽略Developer的更新，仅检查Stable/Special/Beta的更新</li><li>Tester: 检查更新时会检查所有版本的更新</li></ol><p>另外：<strong>GC Server不会推出任何形式的自动检查更新功能，所有检查均由用户手动触发</strong></p><p><strong>为了保证用户数据的安全，我们可能定期更改密码保护策略，所以还是建议各位用户定期检查更新</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;版本规则&quot;&gt;&lt;a href=&quot;#版本规则&quot; class=&quot;headerlink&quot; title=&quot;版本规则&quot;&gt;&lt;/a&gt;版本规则&lt;/h1&gt;&lt;p&gt;GC Server自2019年12日起，版本发行分下面几类：&lt;/p&gt;
    
    </summary>
    
    
      <category term="项目" scheme="https://code004.ml/categories/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="GC Server" scheme="https://code004.ml/categories/%E9%A1%B9%E7%9B%AE/GC-Server/"/>
    
    
      <category term="项目文档" scheme="https://code004.ml/tags/%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>GC Server 在线登录功能</title>
    <link href="https://code004.ml/posts/gc-server-online-login/"/>
    <id>https://code004.ml/posts/gc-server-online-login/</id>
    <published>2019-11-10T12:56:57.000Z</published>
    <updated>2019-11-10T13:15:52.212Z</updated>
    
    <content type="html"><![CDATA[<p>咕了如此之久的在线登录功能，终于在昨晚凌晨1点搞定啦！</p><p>登录界面和原来一模一样，不过差别可大了qwq</p><p>原来的方法：</p><p>将用户账号密码<strong>明文</strong>直接存放在代码中，判定比较快，但是，<strong>极不安全</strong>，<strong>用户信息极易泄露</strong>，而且还<strong>无法检验用户的合法性与真实性</strong>，很容易造成严重的密码泄露事故</p><p>现在的方法：</p><p>首先，将用户账号密码<strong>密文</strong>存在一个不为人知的角落</p><p>然后，每次登录时调动下载器下载这个<strong>密文</strong></p><p>接着，将用户输入的账号密码加密，与标准的密文逐行比较</p><p>注意，新方法里除了用户在客户端登录时输入的账号密码以外，没有任何账号密码的明文出现，整个传输&amp;比较过程全部用的是密文</p><p>明显安全了许多，不过就是需要联网啦qwq 把以前的普通用户（姓名登录）改名叫做离线登录，没网就只能离线咯qwq</p><p>另外，一个好消息：</p><p><strong>新版的用户可以免费注册啦！</strong></p><p>把你的账号与密码发送到<a href="mailto:code004@qq.com" rel="external nofollow noopener noreferrer" target="_blank">code004@qq.com</a>即可申请哦！（请备注申请GC Server账号）</p><hr><p>所以，新版本呢？</p><p>当然在GC Server分站啦~</p><p>不过，这个功能还在努力升级ing… 建议还是等Stable版本出来再下载吧qwq</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;咕了如此之久的在线登录功能，终于在昨晚凌晨1点搞定啦！&lt;/p&gt;
&lt;p&gt;登录界面和原来一模一样，不过差别可大了qwq&lt;/p&gt;
&lt;p&gt;原来的方法：&lt;/p&gt;
&lt;p&gt;将用户账号密码&lt;strong&gt;明文&lt;/strong&gt;直接存放在代码中，判定比较快，但是，&lt;strong&gt;极不安全&lt;/
      
    
    </summary>
    
    
      <category term="项目" scheme="https://code004.ml/categories/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="GC Server" scheme="https://code004.ml/categories/%E9%A1%B9%E7%9B%AE/GC-Server/"/>
    
    
      <category term="项目发布" scheme="https://code004.ml/tags/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>如何在Minecraft中快速地获取经验</title>
    <link href="https://code004.ml/posts/how-to-get-exp-in-minecraft/"/>
    <id>https://code004.ml/posts/how-to-get-exp-in-minecraft/</id>
    <published>2019-10-28T15:42:21.000Z</published>
    <updated>2019-10-29T14:38:48.418Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，MC中的exp（即经验值）是很重要的。可是，你就算干掉末影龙也才那么一点点经验值啊qwq</p><p>没关系。就在今天，我发现了有一个很方便的赚经验值的方法qwq</p><p><strong>注意：本文基于Java版，且开启作弊与创造</strong></p><p>首先，请在主世界建造一个下界传送门（黑曜石），然后进入下界</p><p>然后，请使用基岩在下界搭建一个小黑屋，注意底部也需要铺满基岩（建议使用夜视药水），顶端留1~2格的口子。建议长宽在5格左右，高度10格</p><p>然后，飞入小黑屋，注意不要太低。</p><p>接着，输入以下命令：</p><div class="hljs"><pre><code class="hljs aspectj">/tp <span class="hljs-meta">@e</span> ~ ~ ~</code></pre></div><p>顾名思义，tp是<code>teleport</code>的缩写，也就是传送，<code>@e</code>是指全部实体（包括你自己），相当于把该世界所有实体全部传送到你的位置。自然，除了那些会飞的比如恶魂（恶魂会被屋子卡住然后不断受到伤害最终死掉），其它生物全部落下去了。</p><p>这时候，飞出小屋，在你刚刚留的口子那里放上TNT并使用打火石点燃</p><p>众所周知，TNT会飞下去，然后就会…</p><p>（轰隆…）</p><p>这时候你大概知道为什么我强调小黑屋底部也要铺基岩了吧，<del>血的教训啊…</del></p><p>你可能会说，有可能TNT的伤害不够啊，怎么办？</p><p>没关系，你下去领经验值的时候，可以不用到底，把下面没干完的怪物留到下批。或者你也可以把小黑屋的顶去掉，然后铺满TNT…</p><p>当然了，把这些东西写到命令方块里，通过红石控制会更方便qwq</p><p>效果（1.14.4）：每次（最多20s）可以让你获得10s都吸不完的经验值，反正比末影龙的效率高多了qwq</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;众所周知，MC中的exp（即经验值）是很重要的。可是，你就算干掉末影龙也才那么一点点经验值啊qwq&lt;/p&gt;
&lt;p&gt;没关系。就在今天，我发现了有一个很方便的赚经验值的方法qwq&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：本文基于Java版，且开启作弊与创造&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://code004.ml/categories/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="Minecraft" scheme="https://code004.ml/categories/%E6%B8%B8%E6%88%8F/Minecraft/"/>
    
    
      <category term="娱乐" scheme="https://code004.ml/tags/%E5%A8%B1%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>关于校园欺凌</title>
    <link href="https://code004.ml/posts/about-school-bullying/"/>
    <id>https://code004.ml/posts/about-school-bullying/</id>
    <published>2019-10-20T16:05:13.000Z</published>
    <updated>2020-02-01T07:02:20.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>作为一个初中三年都始终无法与群体融合的学生，我对校园欺凌深有感触</p><p>留个坑，以后填。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;作为一个初中三年都始终无法与群体融合的学生，我对校园欺凌深有感触&lt;/p&gt;
&lt;p&gt;留个坑，以后填。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="随记" scheme="https://code004.ml/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="学校" scheme="https://code004.ml/tags/%E5%AD%A6%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>公告板</title>
    <link href="https://code004.ml/posts/notice/"/>
    <id>https://code004.ml/posts/notice/</id>
    <published>2019-09-14T16:10:39.000Z</published>
    <updated>2019-12-13T12:34:18.534Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning">警告：在访问本站任何页面前，请仔细阅读本文，以免给您带来不必要的麻烦！任何因未阅读本文造成的后果请自己承担！</div><a id="more"></a><h1 id="关于版权"><a href="#关于版权" class="headerlink" title="关于版权"></a>关于版权</h1><p>本站文章可以分为三类：有意义原创，转载与无意义原创</p><p>对于有意义原创文章，会在文章底部再次声明版权协议。对于此类文章，欢迎您分享原文地址，未经许可禁止进行任何摘录与任何形式的转载（如有转载或摘录需求，请联系 <a href="mailto:code004@qq.com" rel="external nofollow noopener noreferrer" target="_blank">code004@qq.com</a> ，只有在您收到明确回复的情况下才允许转载）。根据 CC BY-NC-ND 协议，您不被允许发布基于文章的再创作，也就是说，您不能对文章内容进行修改后再发布，尽管文章可能出现知识性错误。如果文章出现知识性错误，请在评论区告知（或者，如果因为某种原因，此文章没有评论区，请在留言板告知），而不是私自摘录并修改。</p><p>对于转载文章，我会声明原文地址与作者。如果您认为我侵犯了您的版权，请在评论区告知，我会立即删除相关文章并私下商谈。此类文章在转载或摘录前，请仔细阅读原作者注明的协议，否则后果自负。</p><p>对于无意义原创文章，底部既没有再次声明版权协议，文章中又没有声明原文地址或作者。此类文章，允许全文转载，但请在醒目位置附上原文链接及作者。同样地，根据 CC BY-NC-ND 协议，您也不允许发布基于文章的再创作。</p><p>本站在您复制文字前加上了提醒（但是仍然可以复制成功，如果不成功请重试），希望您尊重博主的版权，否则一切后果自负。</p><h1 id="关于评论"><a href="#关于评论" class="headerlink" title="关于评论"></a>关于评论</h1><p>本站原采用Gitalk系统，后期考虑到其不稳定，且拥有读取用户所有公开仓库（<code>public repo</code>）的权限，不完全安全，故现已改用Utterances作为评论系统。在您登录时，无需对任何应用进行授权。如果您已登录Github账号，请点击评论框右下角的”Sign in to comment”，登录成功后您会自动被重定向回到相关界面；如果您未登录Github账号，点击上述按钮后会出现Github的登录界面，照常登录即可。</p><p>对于评论区中吵架/骂人等不适当的言论，博主保留删除的权利。其他正常评论，有小概率可能因为数据迁移或博主手滑而导致丢失，对此博主不承担任何责任。</p><p>评论加载速度可能比较慢，如果超出了您忍受的限度，请尝试<a href="https://code004.coding.me" target="_blank" rel="external nofollow noopener noreferrer">切换到Coding线路</a>再次登录。</p><h1 id="关于学术问题"><a href="#关于学术问题" class="headerlink" title="关于学术问题"></a>关于学术问题</h1><p>如果本站的文章中出现任何学术问题，请不要私自转载并修正错误。请在相关文章的评论区告知。如果文章没有评论区，请在留言板告知。对于为了修改错误而进行的违规摘录/转载，按照上述版权协议处理。</p><h1 id="关于本站中的代码与文件"><a href="#关于本站中的代码与文件" class="headerlink" title="关于本站中的代码与文件"></a>关于本站中的代码与文件</h1><p>由于博主是个很喜欢敲代码/写工程的coder，本站中难免会出现大量代码与文件。现作下列声明：</p><ol><li>本站所有可能对您的电脑造成危害的代码或文件均会特别告知，如果因为使用/查看了危险代码或文件造成您的损失，本站概不负责。</li><li>本站所有未特别声明的代码均为在博主本机或虚拟机上测试通过的代码，文件均为博主正常使用无危害的文件。如果因为使用/查看了安全代码或文件造成您的损失，本站同样概不负责。</li></ol><h1 id="附加声明"><a href="#附加声明" class="headerlink" title="附加声明"></a>附加声明</h1><p>对于本公告或本博客的任何文章的版权问题，请在对应文章下留言或在留言板中留言（或发送邮件到 <a href="mailto:code004@qq.com" rel="external nofollow noopener noreferrer" target="_blank">code004@qq.com</a> ）仅在您收到明确答复后才允许进行转载/摘录等</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note warning&quot;&gt;警告：在访问本站任何页面前，请仔细阅读本文，以免给您带来不必要的麻烦！任何因未阅读本文造成的后果请自己承担！&lt;/div&gt;
    
    </summary>
    
    
      <category term="公告" scheme="https://code004.ml/categories/%E5%85%AC%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>GC Server 的最新消息</title>
    <link href="https://code004.ml/posts/recent-activities-of-gc-server/"/>
    <id>https://code004.ml/posts/recent-activities-of-gc-server/</id>
    <published>2019-09-10T14:34:16.000Z</published>
    <updated>2019-09-10T14:34:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从8月底，我们就再也没有看到过GC Server的更新了qwq</p><p>是的，这是因为<del>项目咕咕了</del>所有开发者都是初三或高一学生，他们不再有那么多空闲时间来更新</p><p>很惭愧，教师节居然没出专版，连个主题都没出…</p><p>（别担心，我们会补上的</p><p>主要是因为，现在GC Server的Beta版本的开发已经到了界面美化阶段（其实代码简化也只完成了70%），目前正在着手于把所有黑底白框框按钮的界面换成图形化界面，这也会大大提升加载速度和响应速度</p><p>除此之外，我们正在研发以下两种（相对来说）比较高级的功能：</p><a id="more"></a><ol><li>检查更新。系统会自动从网络中获取新版本信息。用户可以选择其希望接收提醒的版本（比如普通用户就不需要选择内测的版本，这样可以有效减少对用户的打扰）PS：按照规划，GC Server不会自动检查更新，所有更新均由用户手动触发。还有，目前好像还不支持程序自动下载安装更新qwq</li><li>用户云端化。之后，GC Server的所有用户信息将会被多重加密后存到一个不为人所知的文件中，登录时自动下载此文件并解密运算。也就是说，再也不需要注册后等到下一个版本才能用啦~ 注册功能貌似行不通，还是得找我（或者其他开发者）手动添加qwq 哦对了，这样的话，用户安全会得到进一步的保障，尽管我们还是不能保证密码完全安全。还有，这样也可以方便的封禁某些账号，通过一个变量检查权限即可。</li></ol><p>感谢兹磁，现在我这里的encrypter已经准备好了，就差云端测试了，这估计得等到我有大块空闲时间…</p><p>最近不会有太多的版本发行，不过如果大家需要，封面图还是可以做一下的</p><p>哦对了，评论改用Utterance了，可能加载有点慢，详情请进入留言板查看qwq</p><p>Update 20190913: 教师节就被skipped了，中秋节背景和截图如下：</p><p><img src="/posts/recent-activities-of-gc-server/new-bkg.jpg" srcset="/img/loading.gif" alt="新背景"></p><p><img src="/posts/recent-activities-of-gc-server/screenshot.png" srcset="/img/loading.gif" alt="屏幕截图"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从8月底，我们就再也没有看到过GC Server的更新了qwq&lt;/p&gt;
&lt;p&gt;是的，这是因为&lt;del&gt;项目咕咕了&lt;/del&gt;所有开发者都是初三或高一学生，他们不再有那么多空闲时间来更新&lt;/p&gt;
&lt;p&gt;很惭愧，教师节居然没出专版，连个主题都没出…&lt;/p&gt;
&lt;p&gt;（别担心，我们会补上的&lt;/p&gt;
&lt;p&gt;主要是因为，现在GC Server的Beta版本的开发已经到了界面美化阶段（其实代码简化也只完成了70%），目前正在着手于把所有黑底白框框按钮的界面换成图形化界面，这也会大大提升加载速度和响应速度&lt;/p&gt;
&lt;p&gt;除此之外，我们正在研发以下两种（相对来说）比较高级的功能：&lt;/p&gt;
    
    </summary>
    
    
      <category term="随记" scheme="https://code004.ml/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="GC Server" scheme="https://code004.ml/tags/GC-Server/"/>
    
  </entry>
  
  <entry>
    <title>C++文件读入与输出简洁教程</title>
    <link href="https://code004.ml/posts/cpp-read-from-file/"/>
    <id>https://code004.ml/posts/cpp-read-from-file/</id>
    <published>2019-09-08T07:23:09.000Z</published>
    <updated>2019-09-09T15:51:18.872Z</updated>
    
    <content type="html"><![CDATA[<p>既然是“简洁教程”，当然就只讲用法不讲原理啦233</p><p>C++从文件中读入一般有两个函数：<code>freopen</code>和<code>fopen</code>，这两个函数都在<code>stdio.h</code>（也就是include中所写的<code>cstdio</code>）里面，使用也都很方便，下面我就分别讲一下</p><p>（还有<code>fstream</code>相关的说明，但是因为我太菜了，所以说明极度简略）</p><p>（大概2/3处还有一个<strong>丧心病狂</strong>的演示实验qwq）</p><a id="more"></a><h1 id="freopen"><a href="#freopen" class="headerlink" title="freopen"></a>freopen</h1><h2 id="用法与理解"><a href="#用法与理解" class="headerlink" title="用法与理解"></a>用法与理解</h2><p>一般在算法竞赛中我们使用<code>freopen</code>，代码是这样写的：</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  freopen(<span class="hljs-string">"test.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  freopen(<span class="hljs-string">"test.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-comment">//write your code here...</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>我们知道上面代码中的<code>test.in</code>和<code>test.out</code>是文件名，这没问题</p><p>但是，中间的<code>&quot;r&quot;``&quot;w&quot;</code>和最后的<code>stdin``stdout</code>又是什么意思呢？</p><p>我们先来看看<code>freopen</code>在<code>stdio.h</code>中的定义：</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-function">FILE *<span class="hljs-title">freopen</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *mode,FILE *stream)</span></span>; <span class="hljs-comment">//C99 前</span><span class="hljs-function">FILE *<span class="hljs-title">freopen</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *<span class="hljs-keyword">restrict</span> filename,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *<span class="hljs-keyword">restrict</span> mode,FILE *<span class="hljs-keyword">restrict</span> stream)</span></span>; <span class="hljs-comment">//C99 起</span><span class="hljs-function"><span class="hljs-keyword">errno_t</span> <span class="hljs-title">freopen_s</span><span class="hljs-params">(FILE *<span class="hljs-keyword">restrict</span> *<span class="hljs-keyword">restrict</span> newstreamptr,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *<span class="hljs-keyword">restrict</span> filename, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *<span class="hljs-keyword">restrict</span> mode,FILE *<span class="hljs-keyword">restrict</span> stream)</span></span>; <span class="hljs-comment">//C11 起</span></code></pre></div><p>三种版本基本一致，我们以笔者MinGW中的定义为准，参照上面的第二行（C99 起）</p><p>首先讲中间那个<code>&quot;r&quot;</code>和<code>&quot;w&quot;</code>，在定义中是<code>mode</code>，大概也可以猜到了，就是访问文件的模式</p><p>那么模式有哪几种呢？</p><table><thead><tr><th align="center">文件访问模式字符串</th><th align="center">含义</th><th align="center">解释</th><th align="center">若文件已存在的动作</th><th align="center">若文件不存在的动作</th></tr></thead><tbody><tr><td align="center">“r”</td><td align="center">读</td><td align="center">打开文件以读取</td><td align="center">从头读</td><td align="center">打开失败</td></tr><tr><td align="center">“w”</td><td align="center">写</td><td align="center">创建文件以写入</td><td align="center">销毁内容</td><td align="center">创建新文件</td></tr><tr><td align="center">“a”</td><td align="center">后附</td><td align="center">后附到文件</td><td align="center">写到结尾</td><td align="center">创建新文件</td></tr><tr><td align="center">“r+”</td><td align="center">读扩展</td><td align="center">打开文件以读/写</td><td align="center">从头读</td><td align="center">错误</td></tr><tr><td align="center">“w+”</td><td align="center">写扩展</td><td align="center">创建文件以读/写</td><td align="center">销毁内容</td><td align="center">创建新文件</td></tr><tr><td align="center">“a+”</td><td align="center">后附扩展</td><td align="center">打开文件以读/写</td><td align="center">写到结尾</td><td align="center">创建新文件</td></tr></tbody></table><p>（上述表格和定义来自<a href="https://cppreference.com" target="_blank" rel="external nofollow noopener noreferrer">cppreference.com</a>，<a href="https://zh.cppreference.com/w/c/io/freopen" target="_blank" rel="external nofollow noopener noreferrer">原文地址</a>）</p><p><code>freopen</code>可以被理解为<strong>重定向输入输出流</strong>，换句话说，这个函数会帮你把输入流和输出流<strong>重新指向</strong>某些文件，以某种模式进行读入和输出</p><p><strong>注意！在使用freopen的<code>&quot;r&quot;</code>或<code>&quot;r+&quot;</code>模式时，请确保相关文件存在，否则会造成读入空字符串或者一些其他玄学的东西</strong></p><p><strong>注意！在使用freopen的<code>&quot;w&quot;</code>或<code>&quot;w+&quot;</code>模式时，如果文件已存在会销毁文件</strong></p><p>最后还有一个参数<code>stream</code>，这个就是指流。一般来说就只有<code>stdin</code>（输入流，控制输入）和<code>stdout</code>（输出流，控制输出）两种</p><p>我们平常写完代码运行之后的黑底白字的窗口叫做控制台，也就是<code>Console</code></p><h2 id="在游戏中读写存档"><a href="#在游戏中读写存档" class="headerlink" title="在游戏中读写存档"></a>在游戏中读写存档</h2><p>那么，又有一个问题了，比如我想做一个游戏，然后存档用<code>freopen</code>读写，那么怎么办呢？</p><p>你可能会说，这还不简单</p><p>（下面仅仅是一个实例代码，其中的score表示从存档<code>score.txt</code>读入，最后写入存档的分数）</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> score = <span class="hljs-number">0</span>;  <span class="hljs-comment">//读入存档</span>  freopen(<span class="hljs-string">"score.txt"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;score);  <span class="hljs-comment">//这里开始游戏</span>  <span class="hljs-comment">//...</span>  <span class="hljs-comment">//游戏结束，score发生变化</span>  freopen(<span class="hljs-string">"score.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,score);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>看起来似乎很可行，不是吗？</p><p>且慢，首先我们得搞清楚一个事情。前面提到过，<code>&quot;r&quot;</code>选项如果没有文件就会打开失败，甚至可能导致程序乱码/胡乱输入等，如果用户是第一次玩游戏，那岂不是就Bug了？</p><p>好的，有人会说，那我就加个判断呗，弄个消息框，问用户是否需要读档</p><p>（或者可以用<a href="https://blog.csdn.net/chinawangfei/article/details/42487839" target="_blank" rel="external nofollow noopener noreferrer">这篇文章</a>和<a href="https://blog.csdn.net/roger_77/article/details/1538447" target="_blank" rel="external nofollow noopener noreferrer">这篇文章</a>里的许许多多中方式检测文件是否存在）</p><p>（我记得也可以通过把<code>&quot;r&quot;</code>换成<code>&quot;a+&quot;</code>解决，因为上面的表说了，<code>&quot;a+&quot;</code>也是支持读写的）</p><p>好的，这没问题</p><p>但是，你忘了一个问题</p><p>开始游戏了以后，游戏难道不需要用户输入？一个字符都不需要？</p><p>我不相信</p><p>但是，读档后就会从文件里读入啊</p><p>你控制台输再多字符不也没用吗…</p><p>（试想一下，你的用户第一次玩游戏没问题，从第二次开始读档就无法输入）</p><p>那这个问题怎么解决呢？</p><p>很多人会说，这还不简单，我让用户输不就完了</p><p>但是，如果你的程序最后想做成软件，有安装程序的那种，你难道让用户去安装目录里找文件？</p><p>还有，如果游戏图形化了，图片和资源文件（比如GC Server里触发某个彩蛋会播放<code>Something just like this</code>，这个mp3文件肯定也要存到本地啊，一首歌又没多大，总不可能让用户听歌还卡顿吧qwq）（我又透露了什么…）也会很多啊，找一个文件也会很麻烦啊</p><p>既然上面说<code>freopen</code>是<strong>重定向输入输出流</strong>，定向过去肯定可以定向回到控制台吧</p><p>恭喜你，猜对了</p><p>（关于重定向到控制台的内容是我当初写游戏的时候百度了半天都没找到，最后问教练解决的）</p><p>很简单，还是freopen一行代码：<code>freopen(&quot;CON&quot;,&quot;r&quot;,stdin);</code>（<code>&quot;CON&quot;</code>表示控制台）</p><p>同样的道理，你也可以把输出流定义回来：<code>freopen(&quot;CON&quot;,&quot;w&quot;,stdout);</code>（重定义到控制台就不用选模式了，一般来说直接<code>&quot;r&quot;``&quot;w&quot;</code>就可以了）</p><p>好的，现在我们把上面的游戏代码改进一下（我懒得写文件判断，就直接<code>&quot;a+&quot;</code>吧，应该可以的）：</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> score = <span class="hljs-number">0</span>;  <span class="hljs-comment">//读入存档</span>  freopen(<span class="hljs-string">"score.txt"</span>,<span class="hljs-string">"a+"</span>,<span class="hljs-built_in">stdin</span>); <span class="hljs-comment">//把"r"改为"a+"，解决无存档的问题</span>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;score);  freopen(<span class="hljs-string">"CON"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>); <span class="hljs-comment">//把输入重定向回控制台，不然怎么玩游戏</span>  <span class="hljs-comment">//这里开始游戏</span>  <span class="hljs-comment">//...</span>  <span class="hljs-comment">//游戏结束，score发生变化</span>  freopen(<span class="hljs-string">"score.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,score);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>好的，上面这段代码应该可以解决你的疑问了</p><h2 id="缺陷与不足"><a href="#缺陷与不足" class="headerlink" title="缺陷与不足"></a>缺陷与不足</h2><ol><li>同时读写多个文件（或者文件与控制台）很麻烦，需要不停地<code>freopen</code>切换来切换去，很麻烦</li><li>在我的电脑上有的时候多次<code>freopen</code>后会出现一些玄学的Bug，导致换行被显示为特殊字符，输出无法换行，重复在一行里从头输到尾，再从头输到尾，至今仍未找到方法解决（也有可能是我代码写得太垃圾导致的）</li></ol><p>好的，那么，我们看一下另外一种文件输入输出的方法—fopen</p><h1 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h1><h2 id="用法与理解-1"><a href="#用法与理解-1" class="headerlink" title="用法与理解"></a>用法与理解</h2><p>注：由于博主仅仅将这种用法用于游戏和工程，本部分内容可能并不准确，在某些地方的代码甚至可能出现CE或者RE，如果您发现此类情况，请在本文底部评论中说明，谢谢！</p><p>算法竞赛中应该也有一部分人会用这种写法，相对来说复杂一些：</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  FILE *<span class="hljs-built_in">stdin</span> = <span class="hljs-literal">NULL</span>;  FILE *<span class="hljs-built_in">stdout</span> = <span class="hljs-literal">NULL</span>;<span class="hljs-built_in">stdin</span> = fopen(<span class="hljs-string">"test.in"</span>,<span class="hljs-string">"r"</span>);  <span class="hljs-built_in">stdout</span> = fopen(<span class="hljs-string">"test.out"</span>,<span class="hljs-string">"w"</span>);  <span class="hljs-comment">//write your code here...</span>fclose(<span class="hljs-built_in">stdin</span>);  fclose(<span class="hljs-built_in">stdout</span>);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>（注意，上面代码中间部分的printf和scanf请参照下面方式修改）</p><p>这种方式的好处在哪里？</p><p>好处就在，它可以同时开多个文件进行读入/输出，而且同时也不影响控制台的读入和输出！</p><p>定义什么的，因为博主很懒，所以就省略了，自己去前面给的网站搜去~</p><p>用法大概是这样的：</p><p>首先，你需要定义<code>FILE *xxx = NULL;</code>，这里的<code>xxx</code>相当于一个变量名，<strong>注意，这里的变量名和实际读入的文件名没有关系</strong></p><p>然后，就可以开始进行读入了：<code>xxx = fopen(&quot;xxx.xxx&quot;,&quot;r&quot;);</code></p><p>最后，别忘了关掉这个文件流，否则有可能会出现一些错误：<code>fclose(xxx);</code></p><p>（当然，你可以把<code>FILE *xxx = NULL;</code>和<code>xxx = fopen(&quot;xxx.xxx&quot;,&quot;r&quot;);</code>缩略写成<code>FILE *xxx = fopen(&quot;xxx.xxx&quot;,&quot;r&quot;);</code>）</p><p>看起还是很简单的，中间那行命令的<code>&quot;r&quot;</code>你肯定已经猜到了，没错，也是模式，和上面是完全一样的</p><p>（为了方便读者<del>并且让本文变得更长</del>，把表再放一遍）</p><table><thead><tr><th align="center">文件访问模式字符串</th><th align="center">含义</th><th align="center">解释</th><th align="center">若文件已存在的动作</th><th align="center">若文件不存在的动作</th></tr></thead><tbody><tr><td align="center">“r”</td><td align="center">读</td><td align="center">打开文件以读取</td><td align="center">从头读</td><td align="center">打开失败</td></tr><tr><td align="center">“w”</td><td align="center">写</td><td align="center">创建文件以写入</td><td align="center">销毁内容</td><td align="center">创建新文件</td></tr><tr><td align="center">“a”</td><td align="center">后附</td><td align="center">后附到文件</td><td align="center">写到结尾</td><td align="center">创建新文件</td></tr><tr><td align="center">“r+”</td><td align="center">读扩展</td><td align="center">打开文件以读/写</td><td align="center">从头读</td><td align="center">错误</td></tr><tr><td align="center">“w+”</td><td align="center">写扩展</td><td align="center">创建文件以读/写</td><td align="center">销毁内容</td><td align="center">创建新文件</td></tr><tr><td align="center">“a+”</td><td align="center">后附扩展</td><td align="center">打开文件以读/写</td><td align="center">写到结尾</td><td align="center">创建新文件</td></tr></tbody></table><p>但是，使用<code>fopen</code>怎么读入输出呢？难道还是跟前面一样直接<code>printf``scanf</code>就行了？</p><p>并没有那么简单，但是其实也不难</p><p>只需要把平常你用的<code>printf</code>，稍微改一下即可。比如，</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hello,world! %d"</span>,a);</code></pre></div><p>（a是一个<code>int</code>型变量）</p><p>你只需要把它改成</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-built_in">fprintf</span>(&amp;xxx,<span class="hljs-string">"Hello,world! %d"</span>,a);</code></pre></div><p>（其中的<code>xxx</code>是指前面那个<code>FILE *</code>后面的所谓变量）</p><p>同理，原来的<code>scanf</code>就要改成：</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-built_in">fscanf</span>(&amp;xxx,<span class="hljs-string">"%d"</span>,&amp;a);</code></pre></div><p>也是一样的道理</p><p>（注：由于博主太菜了，所以目前还不知道<code>cin``cout</code>如何在<code>fopen</code>中修改成文件读入，反正<code>fin``fout</code>和<code>fopen</code>应该是没有关系的）</p><p><strong>注意！在我的电脑上编译时，如果使用<code>&quot;r&quot;</code>或者<code>&quot;r+&quot;</code>尝试打开一个不存在的文件，会导致程序无响应</strong></p><p>好的，我们再把上面那个“游戏模板代码”用<code>fopen</code>写一下：</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> score = <span class="hljs-number">0</span>;  <span class="hljs-comment">//读入存档</span>  FILE input;  input = fopen(<span class="hljs-string">"score.txt"</span>,<span class="hljs-string">"a+"</span>); <span class="hljs-comment">//把"r"改为"a+"，解决无存档的问题</span>  <span class="hljs-built_in">fscanf</span>(&amp;input,<span class="hljs-string">"%d"</span>,&amp;score); <span class="hljs-comment">//从文件中读入</span>  fclose(input); <span class="hljs-comment">//关掉输入流（你完全可以在代码末尾再关闭）</span>  <span class="hljs-comment">//这里开始游戏，开始游戏后的代码里直接scanf或者printf或者cin cout即可</span>  <span class="hljs-comment">//...</span>  <span class="hljs-comment">//游戏结束，score发生变化</span>  FILE output = fopen(<span class="hljs-string">"score.txt"</span>,<span class="hljs-string">"w"</span>); <span class="hljs-comment">//如果你想偷懒的话，可以直接这样简写</span>  <span class="hljs-built_in">fprintf</span>(&amp;output,<span class="hljs-string">"%d"</span>,score);  fclose(output); <span class="hljs-comment">//关闭输出流</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="缺陷与不足-1"><a href="#缺陷与不足-1" class="headerlink" title="缺陷与不足"></a>缺陷与不足</h2><ol><li>在正常情况下，代码会比<code>freopen</code>多一些，但是如果需要丧心病狂地同时读入/输出一大堆东西（比如下面这堆代码），它会比<code>freopen</code>好得多</li><li>很容易就忘记<code>fclose</code>，有可能导致出现Bug</li></ol><p>丧心病狂案例：</p><p>要求：共<code>testa.txt``testb.txt</code>…<code>testj.txt</code>10个文件，请依次从第1~10个文件中读入<code>test1``test2</code>…<code>test10</code>10个<code>int</code>型变量，再从控制台中读入<code>test0</code>这个<code>int</code>型变量，然后分别将<code>test1``test2</code>…<code>test10</code>输出到<code>testb.txt``testc.txt</code>…<code>testa.txt</code>，最后将这11个变量之和（保证在<code>int</code>范围内）输出到控制台，保证所有文件全部存在且文件中没有其他内容</p><p><code>fopen</code>版：</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> test0,test1,test2,test3,test4,test5,test6,test7,test8,test9,test10;  FILE *a,*b,*c,*d,*e,*f,*g,*h,*i,*j;<span class="hljs-comment">//十个文件</span>  a = fopen(<span class="hljs-string">"testa.txt"</span>,<span class="hljs-string">"r+"</span>);  b = fopen(<span class="hljs-string">"testb.txt"</span>,<span class="hljs-string">"r+"</span>);  c = fopen(<span class="hljs-string">"testc.txt"</span>,<span class="hljs-string">"r+"</span>);  d = fopen(<span class="hljs-string">"testd.txt"</span>,<span class="hljs-string">"r+"</span>);  e = fopen(<span class="hljs-string">"teste.txt"</span>,<span class="hljs-string">"r+"</span>);  f = fopen(<span class="hljs-string">"testf.txt"</span>,<span class="hljs-string">"r+"</span>);  g = fopen(<span class="hljs-string">"testg.txt"</span>,<span class="hljs-string">"r+"</span>);  h = fopen(<span class="hljs-string">"testh.txt"</span>,<span class="hljs-string">"r+"</span>);  i = fopen(<span class="hljs-string">"testi.txt"</span>,<span class="hljs-string">"r+"</span>);  j = fopen(<span class="hljs-string">"testj.txt"</span>,<span class="hljs-string">"r+"</span>);<span class="hljs-comment">//第7~17行可以缩成一行</span>  <span class="hljs-built_in">fscanf</span>(&amp;a,<span class="hljs-string">"%d"</span>,&amp;test1);  <span class="hljs-built_in">fscanf</span>(&amp;b,<span class="hljs-string">"%d"</span>,&amp;test2);  <span class="hljs-built_in">fscanf</span>(&amp;c,<span class="hljs-string">"%d"</span>,&amp;test3);  <span class="hljs-built_in">fscanf</span>(&amp;d,<span class="hljs-string">"%d"</span>,&amp;test4);  <span class="hljs-built_in">fscanf</span>(&amp;e,<span class="hljs-string">"%d"</span>,&amp;test5);  <span class="hljs-built_in">fscanf</span>(&amp;f,<span class="hljs-string">"%d"</span>,&amp;test6);  <span class="hljs-built_in">fscanf</span>(&amp;g,<span class="hljs-string">"%d"</span>,&amp;test7);  <span class="hljs-built_in">fscanf</span>(&amp;h,<span class="hljs-string">"%d"</span>,&amp;test8);  <span class="hljs-built_in">fscanf</span>(&amp;i,<span class="hljs-string">"%d"</span>,&amp;test9);  <span class="hljs-built_in">fscanf</span>(&amp;j,<span class="hljs-string">"%d"</span>,&amp;test10);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test0);  <span class="hljs-built_in">fprintf</span>(&amp;b,<span class="hljs-string">"%d"</span>,test1);  <span class="hljs-built_in">fprintf</span>(&amp;c,<span class="hljs-string">"%d"</span>,test2);  <span class="hljs-built_in">fprintf</span>(&amp;d,<span class="hljs-string">"%d"</span>,test3);  <span class="hljs-built_in">fprintf</span>(&amp;e,<span class="hljs-string">"%d"</span>,test4);  <span class="hljs-built_in">fprintf</span>(&amp;f,<span class="hljs-string">"%d"</span>,test5);  <span class="hljs-built_in">fprintf</span>(&amp;g,<span class="hljs-string">"%d"</span>,test6);  <span class="hljs-built_in">fprintf</span>(&amp;h,<span class="hljs-string">"%d"</span>,test7);  <span class="hljs-built_in">fprintf</span>(&amp;i,<span class="hljs-string">"%d"</span>,test8);  <span class="hljs-built_in">fprintf</span>(&amp;j,<span class="hljs-string">"%d"</span>,test9);  <span class="hljs-built_in">fprintf</span>(&amp;a,<span class="hljs-string">"%d"</span>,test10);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,test0+test1+test2+test3+test4+test5+test6+test7+test8+test9+test10);&#125;</code></pre></div><p>（40行）</p><p><code>freopen</code>版：</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> test0,test1,test2,test3,test4,test5,test6,test7,test8,test9,test10;  freopen(<span class="hljs-string">"testa.txt"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test1);  freopen(<span class="hljs-string">"testb.txt"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test2);  freopen(<span class="hljs-string">"testc.txt"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test3);  freopen(<span class="hljs-string">"testd.txt"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test4);  freopen(<span class="hljs-string">"teste.txt"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test5);  freopen(<span class="hljs-string">"testf.txt"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test6);  freopen(<span class="hljs-string">"testg.txt"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test7);  freopen(<span class="hljs-string">"testh.txt"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test8);  freopen(<span class="hljs-string">"testi.txt"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test9);  freopen(<span class="hljs-string">"testj.txt"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test10);  freopen(<span class="hljs-string">"CON"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;test0);  freopen(<span class="hljs-string">"testb.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,&amp;test1);  freopen(<span class="hljs-string">"testc.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,&amp;test2);  freopen(<span class="hljs-string">"testd.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,&amp;test3);  freopen(<span class="hljs-string">"teste.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,&amp;test4);  freopen(<span class="hljs-string">"testf.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,&amp;test5);  freopen(<span class="hljs-string">"testg.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,&amp;test6);  freopen(<span class="hljs-string">"testh.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,&amp;test7);  freopen(<span class="hljs-string">"testi.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,&amp;test8);  freopen(<span class="hljs-string">"testj.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,&amp;test9);  freopen(<span class="hljs-string">"testa.txt"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,&amp;test10);  freopen(<span class="hljs-string">"CON"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,test0+test1+test2+test3+test4+test5+test6+test7+test8+test9+test10);&#125;</code></pre></div><p>（51行）</p><p>就可以很明显地看出区别了。还有，我们的<code>fopen</code>写法中可以把第7~17行缩略为一行写完，这样又剩10行（虽然肯定不会那么好看…）</p><h1 id="fstream-相关"><a href="#fstream-相关" class="headerlink" title="fstream 相关"></a>fstream 相关</h1><p>好吧，其实这种方法我并不知道，写这篇博文的时候查资料才发现的，大概说一下吧。具体内容请看<a href="https://blog.csdn.net/u012005313/article/details/46483103" target="_blank" rel="external nofollow noopener noreferrer">这里</a>和<a href="https://blog.csdn.net/kingstar158/article/details/6859379" target="_blank" rel="external nofollow noopener noreferrer">这里</a>（前者只给出了示例，后者非常详细）</p><p>方法原理：</p><ol><li>创建一个ofstream对象来管理输出流；（如需管理输入流，请把<code>ofstream</code>改为<code>ifstream</code>，原理参见<a href="https://blog.csdn.net/kingstar158/article/details/6859379" target="_blank" rel="external nofollow noopener noreferrer">这里</a>）</li><li>将该对象与特定的文件关联起来；</li><li>以使用cout的方式使用该对象，唯一的区别是输出将进入文件，而不是屏幕</li></ol><p>示例代码：</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;//需要注意的头文件</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  ofstream fout; <span class="hljs-comment">//声明一个ofstream对象，叫做fout</span>  fout.open(<span class="hljs-string">"test.txt"</span>); <span class="hljs-comment">//使用open方法将fout对象和特定的文件关联起来，也可以写作 ofstream fout("test.txt");</span>  fout(<span class="hljs-string">"hello world!"</span>); <span class="hljs-comment">//向文件写入</span>  fout.close(); <span class="hljs-comment">//关闭文件连接</span>&#125;</code></pre></div><p>这种方法就不过多叙述了qwq</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>综上，在<code>freopen</code>和<code>fopen</code>中，如果需要读入/输出的文件实在少得可怜，用<code>freopen</code>可能会简单一些。但如果需要在不同文件中切换操作，或者运行一遍程序可能需要多次从文件中读入或者输出到文件的，还是用<code>fopen</code>靠谱一些，也简短一些。</p><p>（不过我没有试过<code>freopen</code>和<code>fopen</code>哪个快，有人愿意试一下嘛…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;既然是“简洁教程”，当然就只讲用法不讲原理啦233&lt;/p&gt;
&lt;p&gt;C++从文件中读入一般有两个函数：&lt;code&gt;freopen&lt;/code&gt;和&lt;code&gt;fopen&lt;/code&gt;，这两个函数都在&lt;code&gt;stdio.h&lt;/code&gt;（也就是include中所写的&lt;code&gt;cstdio&lt;/code&gt;）里面，使用也都很方便，下面我就分别讲一下&lt;/p&gt;
&lt;p&gt;（还有&lt;code&gt;fstream&lt;/code&gt;相关的说明，但是因为我太菜了，所以说明极度简略）&lt;/p&gt;
&lt;p&gt;（大概2/3处还有一个&lt;strong&gt;丧心病狂&lt;/strong&gt;的演示实验qwq）&lt;/p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="https://code004.ml/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="基础知识" scheme="https://code004.ml/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建—从入门到精通</title>
    <link href="https://code004.ml/posts/how-to-build-a-hexo-blog/"/>
    <id>https://code004.ml/posts/how-to-build-a-hexo-blog/</id>
    <published>2019-08-25T12:59:16.000Z</published>
    <updated>2020-02-22T04:53:37.290Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文部分内容来自<a href="https://ouuan.github.io" target="_blank" rel="external nofollow noopener noreferrer">ouuan的博客</a>，<a href="https://ouuan.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97/" target="_blank" rel="external nofollow noopener noreferrer">原文地址</a></p><hr><p>2020.02.13更新：关于Coding再次更新，已更改/增加相应内容。</p><hr><p>我一直以来认为，要弄一个自己的博客或者网站，必须到某些什么“建站工具”里购买建站套装，再自己买一个域名</p><p>这样算下来，一年至少得两三百RMB</p><p>而且，域名什么的配置繁杂，非常麻烦</p><p>所以，一直以来我都是用的CSDN/博客园建的博客，想想SEO也做的好（SEO好就意味着你写的东西可以在百度/谷歌等搜索引擎上被别人查到），也就没什么怨言</p><p>但是，众所周知，CSDN和博客园的广告一大堆，根本不是我能容忍的</p><p>而且，无论选择什么主题，都难看得要死qwq</p><p>（当然了，最近有一位dalao弄出了博客园的极致美化，请看<a href="https://github.com/BNDong/Cnblogs-Theme-SimpleMemory/" target="_blank" rel="noopener">BNDong/Cnblogs-Theme-SimpleMemory</a>，这个其实还不错）</p><p>就在今年3月份，我才知道还有这样一个东西的存在</p><p>Hexo</p><p>这个东西可以帮你快速将您用markdown和Latex写的文章渲染为html文件，并借助Github/Coding/Gitee Pages快速发布。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>阅读完本文后，您可以做到：</p><ul><li>一分钱不花搭建一个美丽而简洁的博客（具体由主题决定）</li><li>拥有一个（或者多个）简短的免费顶级域名</li><li>限制您的博客仅限某些IP地址访问，或者拒绝某些IP地址访问</li><li>轻松写作/发布博客</li><li>做好百度与谷歌的SEO优化，其他搜索引擎类似</li></ul><p>注：如果您要查看某个功能的设置，请直接点击文章左边的目录（TOC）直达</p><p>本文基于Hexo 3.9.0，文中不会提及因不同版本造成的差异（不过其实也没什么差异qwq</p><p>本文中提到的node.js和git安装仅适用于Windows，如果您使用其他系统请自行搜索下载</p><a id="more"></a><h1 id="Github-Coding-Gitee设置"><a href="#Github-Coding-Gitee设置" class="headerlink" title="Github/Coding/Gitee设置"></a>Github/Coding/Gitee设置</h1><p>首先，您需要在 Github, Coding, Gitee 中选择一个：</p><p>Github：拥有最悠久的历史，最稳定，但是在国外，所以可能导致建完后您的blog访问速度慢一些</p><p>Coding：最近又各种服务更改，总之不是十分稳定，我之前绑定的域名在更换到企业版后全没了/(ㄒoㄒ)/ 搭建Pages必须手机+身份证号码认证</p><p>Gitee：后起之秀，也不错，不过搭建Pages也必须手机验证，也不是十分稳定</p><p>综上，您可以选择一个平台进行操作，也可以多个平台都操作（建议最多选择两个平台，一个国外一个国内）。如果您选择的是单个平台，请通过左边目录直达；如果您选择多个平台，请依次按照每个平台的教程进行设置。</p><p>如果求方便，推荐直接Github或者直接Coding</p><p>如果希望国内外都可以很快访问，建议Github+Coding</p><p>Gitee的话，个人不太了解也没太大兴趣去研究，所以下文中并不会详细讲解qwq，欢迎自行尝试并在评论区分享</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>首先，登录或者注册一个Github账号</p><p>然后，如图所示，点击右上角的加号，选择<code>New repository</code>，</p><p><img src="/posts/how-to-build-a-hexo-blog/github1.png" srcset="/img/loading.gif" alt="github1"></p><p>然后，看到如下界面：</p><p><img src="/posts/how-to-build-a-hexo-blog/github2.png" srcset="/img/loading.gif" alt="github2"></p><p>请在我填写xxx.github.io的位置把xxx换成你自己的Github用户名</p><p>在下面的Description里，可以写也可以不写，写了也没什么用qwq</p><p>下面必须选择Public，千万不要选择Private</p><p>下面的<code>Initialize this repository with a README</code>请不要勾选</p><p>好的，如果看到下面的界面，说明成功了（请自行把xxx换成您的github用户名）</p><p><img src="/posts/how-to-build-a-hexo-blog/github3.png" srcset="/img/loading.gif" alt="github3"></p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p><del>Coding原来在<a href="https://coding.net" target="_blank" rel="external nofollow noopener noreferrer">coding.net</a>，但是最近它的个人版和腾讯云开发者平台合并，如果您是之前Coding的用户，请从<a href="https://coding.net/login" target="_blank" rel="external nofollow noopener noreferrer">coding个人版登录</a>界面使用您原来的Coding账号/密码登录，并跳转至腾讯云开发者平台，切记要绑定邮箱，否则就只能使用微信登录</del></p><p><del>如果您不是Coding用户，请自行前往<a href="https://cloud.tencent.com/register" target="_blank" rel="external nofollow noopener noreferrer">腾讯云注册界面</a>使用微信/QQ/邮箱注册（需要验证手机号）</del></p><p><del>注册/登录完成后，请前往<a href="https://dev.tencent.com/user" target="_blank" rel="external nofollow noopener noreferrer">腾讯云开发者平台用户页</a>，点击加号，选择项目，如下图：</del></p><p>注：Coding近期会自动帮个人用户升级为免费的企业版，请使用 <a href="https://coding.net" target="_blank" rel="external nofollow noopener noreferrer">https://coding.net</a> 首页右上角注册，注册成功并登录后，按照下图类似的位置可以找到新建项目：</p><p><img src="/posts/how-to-build-a-hexo-blog/coding1.png" srcset="/img/loading.gif" alt="coding1"></p><p>然后填写项目名称，就是<code>xxx.coding.me</code>（请自行将<code>xxx</code>替换为您的用户名）</p><p>注：更新后发现，在Coding中项目名称不影响效果，故可以随便填写，但为了方便区别您的blog与其它项目的repo，建议还是按<code>xxx.coding.me</code>来</p><p>完毕后，请点击左边列表的第二项（“代码”），如果看到下图界面，说明成功：</p><p><img src="/posts/how-to-build-a-hexo-blog/coding2.png" srcset="/img/loading.gif" alt="coding2"></p><h2 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h2><p>Gitee是一个很典型的后起之秀，不过流程也很简单，还可以使用Github登录。请在<a href="https://gitee.com/signup" target="_blank" rel="external nofollow noopener noreferrer">Gitee注册界面</a>进行注册，在<a href="https://gitee.com/login" target="_blank" rel="external nofollow noopener noreferrer">Gitee登录界面</a>进行登录。</p><p>同上，不再过多叙述。点击右上角的加号，选择新建项目即可。</p><h1 id="本地安装Hexo"><a href="#本地安装Hexo" class="headerlink" title="本地安装Hexo"></a>本地安装Hexo</h1><p>请在您的计算机中安装：</p><ul><li><a href="https://gitforwindows.org/" target="_blank" rel="external nofollow noopener noreferrer">Git</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="external nofollow noopener noreferrer">node.js</a></li></ul><p>安装路径可以根据喜好更改，最好按默认</p><p>建议node.js安装的时候选择左边的绿按钮，稳定版本更好，开发版本可能不稳定</p><p>请在cmd中使用 <code>node -v</code>, <code>npm -v</code> 和 <code>git --version</code> 检查是否安装成功。如果成功，应返回一行含有版本号的字符串，而不是<code>xxx 不是内部或外部命令，也不是可运行的程序或批处理文件。</code>，如果node或者npm不成功，请重新安装nodejs；如果git不成功，请重新安装git。</p><p>如果您已经安装Git和node.js，只是版本比较旧，您无需再次进行安装或进行更新</p><p>安装后，请从开始菜单打开Git Bash或者在任意位置右键选择Git Bash Here</p><p><img src="/posts/how-to-build-a-hexo-blog/git-bash.png" srcset="/img/loading.gif" alt="git-bash"></p><p>输入:<code>npm install -g hexo</code>，可能并不能复制粘贴，请手打qwq</p><p>如果地址被墙，请自行科学上网或者输入<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>切换到淘宝镜像后输入<code>cnpm install -g hexo</code></p><p>等待片刻后会有一些提示和警告，可以忽略。完成后请使用<code>hexo -v</code>来检查是否安装成功</p><p>接着，在任意位置创建一个文件夹，名字任意，最好不要有一些奇奇怪怪的字符</p><p>这个文件夹将用于存储你的blog的所有信息，包括设置/插件/页面的markdown文件/文章的markdown文件，随着文章/页面与插件的数量增加而增加，<strong>可以占到50M~1G，请谨慎选好位置</strong>，由于文件很多，事后移动耗时很长</p><p>接下来，在你刚刚创建的文件夹里（后文称为<strong><em>站点目录</em></strong>）右键单击，选择Git Bash Here</p><p>输入命令：<code>hexo init</code></p><p>等待一会，您可以看到您选择的主文件夹里多了这些文件/文件夹：</p><ul><li>node_modules</li><li>scaffolds</li><li>source</li><li>themes</li><li>_config.yml</li><li>package.json</li></ul><p>其中，node_modules是用来存放您使用npm下载的插件的，scaffolds是文章模板，您稍后创建的文章会按照模板创建，可以对模板进行修改，但这些都到一切设置完毕了以后再说吧</p><p>source用来存放您所有文章/页面的markdown代码或者HTML代码，themes用来存放您稍后下载的主题文件（默认主题landscape），_config.yml则是用来进行站点配置的，在后文中会被称为<strong><em>站点配置文件</em></strong></p><p>package.json用来存放您下载插件的目录，平常不要修改为好</p><p>请接着输入<code>npm install</code>来下载一些需要的包，等待下载完毕后，请打开<strong><em>站点配置文件</em></strong>，做以下基本配置：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-comment"># Hexo Configuration</span><span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><span class="hljs-comment"># Site</span><span class="hljs-attr">title:</span> <span class="hljs-string">博客标题</span><span class="hljs-attr">subtitle:</span> <span class="hljs-string">博客副标题</span><span class="hljs-attr">description:</span> <span class="hljs-string">博客描述（可以填写</span> <span class="hljs-string">xxx的博客）</span><span class="hljs-attr">author:</span> <span class="hljs-string">作者</span><span class="hljs-attr">language:</span> <span class="hljs-string">语言，稍后根据主题进行设置</span><span class="hljs-attr">timezone:</span> <span class="hljs-string">时区，不建议设置</span><span class="hljs-comment"># URL</span><span class="hljs-comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><span class="hljs-attr">url:</span> <span class="hljs-string">域名，可以暂时按照默认的</span> <span class="hljs-string">http://yoursite.com</span> <span class="hljs-string">进行设置，稍后更改</span><span class="hljs-attr">root:</span> <span class="hljs-string">不用管</span><span class="hljs-attr">permalink:</span> <span class="hljs-string">不用管，稍后SEO优化时会用到</span></code></pre></div><p>如上进行部分设置后，请在<strong><em>站点目录</em></strong>中右键Git Bash Here，输入<code>hexo s</code>，打开浏览器，地址栏输入<code>localhost:4000</code>即可查看（这里的<code>hexo s</code>是<code>hexo server</code>的缩写，请在“发布博客”一章末尾详细查看）</p><p>如果4000端口冲突，请使用cmd进行<code>taskkill /f /im 4000</code>或者使用<code>hexo s -p 4001</code>修改到4001端口</p><p>如果您看到以下界面，说明成功：</p><p><img src="/posts/how-to-build-a-hexo-blog/hexo-show.png" srcset="/img/loading.gif" alt="hexo-show"></p><p>请同时按下Ctrl+C来关闭窗口（若出现类似于<code>终止批处理操作吗(Y/N)?</code>的提示，输入<code>y</code>即可）</p><p>如果没有，请按照上述步骤重试</p><p>好的，接下来就是挑选主题的时候了qwq</p><h1 id="主题选择与下载切换"><a href="#主题选择与下载切换" class="headerlink" title="主题选择与下载切换"></a>主题选择与下载切换</h1><p>好的，我们来看一下<a href="https://hexo.io" target="_blank" rel="external nofollow noopener noreferrer">hexo官网</a>的<a href="https://hexo.io/themes" target="_blank" rel="external nofollow noopener noreferrer">主题列表</a></p><p>天啊，这么多！</p><p>没错，慢慢挑吧qwq</p><p>当然了，也可以利用搜索功能，如果您喜欢material design，不妨搜索标签material（顺便安利一波我的主题Materialized）</p><p>推荐几个：</p><ol><li>NexT，非常火爆，人气很高</li><li>Jacman，简洁明了，加载快速</li><li>Material（最新版有Bug，请使用1.5.2而不要使用1.5.3及以上版本）</li><li>Butterfly，适合游记比较多的博客，图片功能完善</li><li>Materialized，加载快速，Material化</li></ol><p>如上，对每个主题，点击预览图片会进入预览网站，点击蓝色的主题名称会进入相应的Github repo。</p><p>若主题README中无特殊说明，请使用下面命令进行主题复制：</p><div class="hljs"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/xxx/xxx themes/xxx</code></pre></div><p>（上面的<code>https://github.com/xxx/xxx</code>请替换为主题repo地址，<code>themes/xxx</code>的xxx请替换为主题名称）</p><p>要使用一个主题，请先打开<strong><em>站点配置文件</em></strong>，将<code>themes: landscape</code>改为<code>themes: xxx</code>（xxx为主题在themes下的目录名字，就是刚刚代码里的主题名称）</p><p>比如，我把next主题通过<code>git clone</code>到了themes目录下，就把<strong><em>站点配置文件</em></strong>中的themes选项改为next即可</p><p>在每个主题下都有一个<code>_config.yml</code>文件，它被称为<strong><em>主题配置文件</em></strong>，用来对主题进行自定义设置（注意，主题的语言设置在站点配置文件里）</p><p>好的，接下来，我以NexT主题为例，带领您领略一下主题中多样的功能</p><p>（本文基于next 7.1.2，之所以我不更新是因为7.3.0改动太大，导致很多地方不美观，7.2.0取消了自定义设置）</p><p>（Update:后来看了ouuan dalao博客的评论以后发现，7.2.0及以上版本的NexT主题在主题配置文件里有一个<code>custom_file_path</code>选项，把里面的<code>style</code>取消注释并在相应的目录添加一个相应的文件，放入自定义设置的代码即可）</p><h1 id="NexT主题基础配置"><a href="#NexT主题基础配置" class="headerlink" title="NexT主题基础配置"></a>NexT主题基础配置</h1><p>请打开next主题的<strong><em>主题配置文件</em></strong>，Ctrl+F搜索<code>Scheme Settings</code>，找到下面选项：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-comment"># ---------------------------------------------------------------</span><span class="hljs-comment"># Scheme Settings</span><span class="hljs-comment"># ---------------------------------------------------------------</span><span class="hljs-comment"># Schemes</span><span class="hljs-attr">scheme:</span> <span class="hljs-string">Muse</span><span class="hljs-comment">#scheme: Mist</span><span class="hljs-comment">#scheme: Pisces</span><span class="hljs-comment">#scheme: Gemini</span></code></pre></div><p>这里的<code>Muse</code> <code>Mist</code> <code>Pisces</code> <code>Gemini</code>可以理解为NexT的四个小主题</p><p>截图如下：</p><p>Muse:</p><p><img src="/posts/how-to-build-a-hexo-blog/muse.png" srcset="/img/loading.gif" alt="Muse"></p><p>Mist:</p><p><img src="/posts/how-to-build-a-hexo-blog/mist.png" srcset="/img/loading.gif" alt="Mist"></p><p>Pisces:</p><p><img src="/posts/how-to-build-a-hexo-blog/pisces.png" srcset="/img/loading.gif" alt="Pisces"></p><p>Gemini:</p><p><img src="/posts/how-to-build-a-hexo-blog/gemini.png" srcset="/img/loading.gif" alt="Gemini"></p><p>默认是Muse，个人推荐Gemini，Pisces和Gemini的区别就是Gemini更宽松一些，Mist也不错</p><p>如果想用Muse的话，还是先找好背景图片再说吧… 否则…</p><p>PS：如果想查看自己网站的效果，可以随时保存修改然后<code>hexo s</code></p><p>请继续在<strong><em>主题配置文件</em></strong>中Ctrl+F搜索<code>powered</code>，可以找到下面选项：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">powered:</span>  <span class="hljs-comment"># Hexo link (Powered by Hexo).</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># Version info of Hexo after Hexo link (vX.X.X).</span>  <span class="hljs-attr">version:</span> <span class="hljs-literal">true</span><span class="hljs-attr">theme:</span>  <span class="hljs-comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># Version info of NexT after scheme info (vX.X.X).</span>  <span class="hljs-attr">version:</span> <span class="hljs-literal">true</span></code></pre></div><p>这会让博客生成后底部存在“由Hexo强力驱动 V3.9.0”和“主题：NexT V7.1.2”（文字我不太记得清楚了qwq）</p><p>如果您想给hexo或者next主题打广告，请跳过此段</p><p>如果您想博客底部干净整洁，请把上面片段中所有<code>true</code>改成<code>false</code>（<code>theme.enable</code>选项必须保持<code>true</code>）</p><p><strong>安全警告：根据NexT主题的LICENSE，您应该确保theme.enable选项打开，</strong><a href="https://github.com/theme-next/hexo-theme-next/blob/master/LICENSE.md" target="_blank" rel="noopener">NexT主题LICENSE</a>原文节选如下：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-string">c)</span> <span class="hljs-string">A</span> <span class="hljs-string">covered</span> <span class="hljs-string">work</span> <span class="hljs-string">must</span> <span class="hljs-string">retain</span> <span class="hljs-string">«NexT»</span> <span class="hljs-string">official</span> <span class="hljs-string">website</span> <span class="hljs-string">link</span> <span class="hljs-string">(https://theme-next.org)</span> <span class="hljs-string">in</span> <span class="hljs-string">footer</span> <span class="hljs-string">section</span> <span class="hljs-string">of</span> <span class="hljs-string">every</span> <span class="hljs-string">website</span> <span class="hljs-string">created,</span> <span class="hljs-string">modified</span> <span class="hljs-string">or</span> <span class="hljs-string">manipulated</span> <span class="hljs-string">by</span> <span class="hljs-string">using</span> <span class="hljs-string">«NexT».</span> <span class="hljs-string">«NexT»</span> <span class="hljs-attr">theme configuration must be:</span><span class="hljs-attr">footer:</span>  <span class="hljs-attr">theme:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span></code></pre></div><p>接下来，请继续在<strong><em>主题配置文件</em></strong>中找到以下内容（请自行Ctrl+F搜索）</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-comment"># ---------------------------------------------------------------</span><span class="hljs-comment"># Menu Settings</span><span class="hljs-comment"># ---------------------------------------------------------------</span><span class="hljs-comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span><span class="hljs-comment"># Usage: `Key: /link/ || icon`</span><span class="hljs-comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span><span class="hljs-comment"># Value before `||` delimeter is the target link.</span><span class="hljs-comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span><span class="hljs-comment"># External url should start with http:// or https://</span><span class="hljs-attr">menu:</span>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">home</span>  <span class="hljs-comment">#about: /about/ || user</span>  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/</span> <span class="hljs-string">||</span> <span class="hljs-string">th</span>  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/</span> <span class="hljs-string">||</span> <span class="hljs-string">tags</span>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">archive</span>  <span class="hljs-attr">links:</span> <span class="hljs-string">/links/</span> <span class="hljs-string">||</span> <span class="hljs-string">link</span>  <span class="hljs-attr">message:</span> <span class="hljs-string">/message/</span> <span class="hljs-string">||</span> <span class="hljs-string">comments</span>  <span class="hljs-attr">following:</span> <span class="hljs-string">/following/</span> <span class="hljs-string">||</span> <span class="hljs-string">group</span>  <span class="hljs-attr">codes:</span> <span class="hljs-string">/codes/</span> <span class="hljs-string">||</span> <span class="hljs-string">file-code-o</span>  <span class="hljs-comment">#schedule: /schedule/ || calendar</span>  <span class="hljs-comment">#sitemap: /sitemap.xml || sitemap</span>  <span class="hljs-comment">#commonweal: /404/ || heartbeat</span></code></pre></div><p>这里就是主菜单设置了，也就是Muse中间的，Mist上面的，Pisces和Gemini左边/右边的菜单</p><p>格式很简单，可以写成这样：<code>{name}: {link} || {icon}</code></p><p><code>{name}</code>是指显示在菜单中的名称，比如categories和tags，就是分类和标签</p><p><strong>注意：分类和标签页面需要自己创建：</strong></p><div class="hljs"><pre><code class="hljs routeros">hexo new<span class="hljs-built_in"> page </span>tagshexo new<span class="hljs-built_in"> page </span>categories</code></pre></div><p>随后在<code>source/tags/index.md</code>中<code>front-matter</code>里输入：</p><div class="hljs"><pre><code class="hljs elm"><span class="hljs-keyword">type</span>: tags</code></pre></div><p>注：某些主题也可能是<code>layout: tags</code>，根据主题决定。</p><p>分类界面也是如此，把<code>tags</code>改成<code>categories</code>即可。</p><p>回到菜单设置，<code>{link}</code>是指链接地址，可以为两种形式：</p><ul><li>链接到某个网站：<a href="http://xxx.com" target="_blank" rel="external nofollow noopener noreferrer">http://xxx.com</a> 或者 <a href="https://xxx.com" target="_blank" rel="external nofollow noopener noreferrer">https://xxx.com</a></li></ul><p><strong>注意！链接到某个网站请不要直接输入域名（baidu.com），请务必输入 <a href="http://baidu.com" target="_blank" rel="external nofollow noopener noreferrer">http://baidu.com</a> 或者 <a href="https://baidu.com" target="_blank" rel="external nofollow noopener noreferrer">https://baidu.com</a></strong></p><ul><li>博客的子链接：/xxx/ （xxx是指页面的名称，在后文会提到）</li></ul><p><code>{icon}</code>是指图标名称，请在<a href="http://fontawesome.dashgame.com/" target="_blank" rel="external nofollow noopener noreferrer">Font Awesome</a>查找，查找方式如下：</p><p><img src="/posts/how-to-build-a-hexo-blog/fontawesome.png" srcset="/img/loading.gif" alt="Font Awesome"></p><p>比如我想菜单里有第二行第一个图标（那个黑白半圆的），只需要把上面的<code>{icon}</code>替换为<code>adjust</code>即可</p><p>这下面还有这个设置：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-comment"># Enable / Disable menu icons / item badges.</span><span class="hljs-attr">menu_settings:</span>  <span class="hljs-attr">icons:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">badges:</span> <span class="hljs-literal">false</span></code></pre></div><p>这个基本上不用管，如果你真的不想在菜单里显示图标，请把<code>icons</code>设置为<code>false</code></p><p>好的，接下来请找到下面的侧边栏设置：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-comment"># ---------------------------------------------------------------</span><span class="hljs-comment"># Sidebar Settings</span><span class="hljs-comment"># See: https://theme-next.org/docs/theme-settings/sidebar</span><span class="hljs-comment"># ---------------------------------------------------------------</span><span class="hljs-comment"># Posts / Categories / Tags in sidebar.</span><span class="hljs-attr">site_state:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># Social Links</span><span class="hljs-comment"># Usage: `Key: permalink || icon`</span><span class="hljs-comment"># Key is the link label showing to end users.</span><span class="hljs-comment"># Value before `||` delimeter is the target permalink.</span><span class="hljs-comment"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span><span class="hljs-attr">social:</span>  <span class="hljs-attr">GitHub:</span> <span class="hljs-string">https://github.com/code004Accepted</span> <span class="hljs-string">||</span> <span class="hljs-string">github</span>  <span class="hljs-attr">E-Mail:</span> <span class="hljs-string">mailto:code004@qq.com</span> <span class="hljs-string">||</span> <span class="hljs-string">envelope</span>  <span class="hljs-attr">Google:</span> <span class="hljs-string">https://plus.google.com/code004Accepted</span> <span class="hljs-string">||</span> <span class="hljs-string">google</span>  <span class="hljs-attr">Twitter:</span> <span class="hljs-string">https://twitter.com/brianchen2006</span> <span class="hljs-string">||</span> <span class="hljs-string">twitter</span>  <span class="hljs-attr">YouTube:</span> <span class="hljs-string">https://youtube.com/code004Accepted</span> <span class="hljs-string">||</span> <span class="hljs-string">youtube</span>  <span class="hljs-attr">Instagram:</span> <span class="hljs-string">https://instagram.com/brianchen2019</span> <span class="hljs-string">||</span> <span class="hljs-string">instagram</span>  <span class="hljs-attr">Skype:</span> <span class="hljs-string">skype:code004?call|chat</span> <span class="hljs-string">||</span> <span class="hljs-string">skype</span>  <span class="hljs-attr">Codepen:</span> <span class="hljs-string">https://codepen.io/code004Accepted/</span> <span class="hljs-string">||</span> <span class="hljs-string">codepen</span>  <span class="hljs-attr">Ask.fm:</span> <span class="hljs-string">https://ask.fm/code004</span> <span class="hljs-string">||</span> <span class="hljs-string">question</span>  <span class="hljs-attr">LGOJ:</span> <span class="hljs-string">https://www.luogu.org/space/show?uid=228062</span> <span class="hljs-string">||</span> <span class="hljs-string">code</span><span class="hljs-attr">social_icons:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">icons_only:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">transition:</span> <span class="hljs-literal">false</span><span class="hljs-comment"># Blog rolls</span><span class="hljs-attr">links_icon:</span> <span class="hljs-string">link</span><span class="hljs-attr">links_title:</span> <span class="hljs-string">友情链接</span><span class="hljs-attr">links_layout:</span> <span class="hljs-string">block</span><span class="hljs-comment">#links_layout: inline</span><span class="hljs-attr">links:</span>  <span class="hljs-comment"># Standred C++: https://isocpp.org</span>  <span class="hljs-comment"># Cloudflare: https://cloudflare.com</span>  <span class="hljs-comment"># Python: https://www.python.org</span><span class="hljs-comment"># Sidebar Avatar</span><span class="hljs-attr">avatar:</span>  <span class="hljs-comment"># In theme directory (source/images): /images/avatar.gif</span>  <span class="hljs-comment"># In site directory (source/uploads): /uploads/avatar.gif</span>  <span class="hljs-comment"># You can also use other linking images.</span>  <span class="hljs-attr">url:</span> <span class="hljs-string">/images/avatar.jpg</span>  <span class="hljs-comment"># If true, the avatar would be dispalyed in circle.</span>  <span class="hljs-attr">rounded:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span>  <span class="hljs-attr">opacity:</span> <span class="hljs-number">1</span>  <span class="hljs-comment"># If true, the avatar would be rotated with the cursor.</span>  <span class="hljs-attr">rotated:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># Table Of Contents in the Sidebar</span><span class="hljs-attr">toc:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># Automatically add list number to toc.</span>  <span class="hljs-attr">number:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span>  <span class="hljs-attr">expand_all:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front-matter.</span>  <span class="hljs-attr">max_depth:</span> <span class="hljs-number">6</span><span class="hljs-attr">sidebar:</span>  <span class="hljs-comment"># Sidebar Position, available values: left | right (only for Pisces | Gemini).</span>  <span class="hljs-attr">position:</span> <span class="hljs-string">left</span>  <span class="hljs-comment">#position: right</span>  <span class="hljs-comment"># Manual define the sidebar width. If commented, will be default for:</span>  <span class="hljs-comment"># Muse | Mist: 320</span>  <span class="hljs-comment"># Pisces | Gemini: 240</span>  <span class="hljs-comment">#width: 300</span>  <span class="hljs-comment"># Sidebar Display, available values (only for Muse | Mist):</span>  <span class="hljs-comment">#  - post    expand on posts automatically. Default.</span>  <span class="hljs-comment">#  - always  expand for all pages automatically.</span>  <span class="hljs-comment">#  - hide    expand only when click on the sidebar toggle icon.</span>  <span class="hljs-comment">#  - remove  totally remove sidebar including sidebar toggle.</span>  <span class="hljs-attr">display:</span> <span class="hljs-string">post</span>  <span class="hljs-comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span>  <span class="hljs-attr">offset:</span> <span class="hljs-number">12</span>  <span class="hljs-comment"># Enable sidebar on narrow view (only for Muse | Mist).</span>  <span class="hljs-attr">onmobile:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># Click any blank part of the page to close sidebar (only for Muse | Mist).</span>  <span class="hljs-attr">dimmer:</span> <span class="hljs-literal">false</span><span class="hljs-attr">back2top:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># Back to top in sidebar.</span>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># Scroll percent label in b2t button.</span>  <span class="hljs-attr">scrollpercent:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># A button to open designated chat widget in sidebar.</span><span class="hljs-comment"># Firstly, you need enable the chat service you want to activate its sidebar button.</span><span class="hljs-attr">chat:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">#service: chatra</span>  <span class="hljs-comment">#service: tidio</span>  <span class="hljs-attr">icon:</span> <span class="hljs-string">comment</span> <span class="hljs-comment"># icon in Font Awesome 4, set false to disable icon</span>  <span class="hljs-attr">text:</span> <span class="hljs-string">Chat</span> <span class="hljs-comment"># button text, change it as you wish</span></code></pre></div><p><img src="/posts/how-to-build-a-hexo-blog/sidebar.png" srcset="/img/loading.gif" alt="sidebar"></p><p>如图所示，<code>site_state</code>就是在侧边栏中显示您博客的文章（日志）数量/分类数量/标签数量，就是上图的1</p><p><code>social</code>以及它下面的许许多多的选项就是图中的2，图标同样可以修改</p><p>而底下的<code>links</code>则是友情链接设置，由于友情链接太多所以我单独开了一个页面来放，各位可能看不到侧边栏友情链接的效果qwq 欢迎前往其他人的blog查看</p><p>注意到，友情链接里有<code>links_layout</code>选项，给出了两种设置：<code>block</code>与<code>inline</code></p><p>说直白点，<code>block</code>就是一行一个，每个居中；<code>inline</code>就是一行多个，把每行都尽可能填满，居中</p><p>接下来的<code>avatar</code>设置就是侧边栏头像，请将头像放到next主题目录下的<code>source/images</code>文件夹中，然后输入<code>/images/avatar.jpg</code>（avatar.jpg是文件名，可随意修改）</p><p>当然了，按照配置文件的说明，您也可以放到站点目录下的<code>source/images</code>文件夹中，然后输入<code>/uploads/avatar.jpg</code>，不过我并不推荐这种方式，我也并未尝试过，所以还是请使用上面一种方式</p><p>注意到，关于侧边栏头像的还有几个设置：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">rounded:</span> <span class="hljs-literal">true</span><span class="hljs-attr">opacity:</span> <span class="hljs-number">1</span><span class="hljs-attr">rotated:</span> <span class="hljs-literal">true</span></code></pre></div><p>其中，<code>rounded</code>是指是否让头像呈圆形（就是以正方形头像的对角线交点为原点，正方形边长的一半为半径，画出来一个圆，只有圆内的头像会显示出来 <del>哎呀怎么这么复杂</del>），<code>opacity</code>是指头像的不透明度（注意不是透明度），设置为1表示完全不透明，建议0.9~1，<code>rotated</code>表示头像是否随鼠标旋转（就是鼠标移上去的时候头像是否转），<code>rotated</code>设置为<code>true</code>以后，鼠标移上头像就会顺时针旋转一整圈（360°），鼠标移下来就会逆时针转回去</p><p>下面可以找到<code>toc</code>的设置，这个设置的作用是浏览文章时可以通过侧边栏的目录直达某一个大标题或者一个小标题（不就是目录吗…</p><p><code>toc</code>的选项：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">number:</span> <span class="hljs-literal">true</span><span class="hljs-attr">wrap:</span> <span class="hljs-literal">false</span><span class="hljs-attr">expand_all:</span> <span class="hljs-literal">false</span><span class="hljs-attr">max_depth:</span> <span class="hljs-number">6</span></code></pre></div><p>解释一下，<code>number</code>是指自动为标题加上编号，比如会有<code>3</code>的大标题编号，3下面的小标题就自然命名为<code>3.1</code>，<code>3.2</code>，更小的就是<code>3.1.1</code>… 可以根据个人喜好设置</p><p><code>wrap</code>开启后，当标题长度大于侧边栏长度时，自动换行，不推荐</p><p><code>expand_all</code>是指自动展开所有标题</p><p>当<code>expand_all</code>设置为<code>false</code>时，不自动展开标题，换句话说就是当你点到1的大标题时才会展开1.1 1.2这些小标题，当你点击1.2时才会再显示1.2.1 1.2.2之类的更小的标题</p><p>但是，一旦<code>expand_all</code>被打开，你的所有文章的所有标题都会直接被显示出来，会很乱，不过也可以根据个人喜好吧qwq</p><p><code>max_depth</code>表示标题探索深度，Markdown只有6层标题，所以最多设置为6，如果你只想让目录显示1/2/3级的大标题，输入3即可，不推荐更改</p><p>好的，底下有一长串的侧边栏位置设置，如下：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">sidebar:</span>  <span class="hljs-comment"># Sidebar Position, available values: left | right (only for Pisces | Gemini).</span>  <span class="hljs-attr">position:</span> <span class="hljs-string">left</span>  <span class="hljs-comment">#position: right</span>  <span class="hljs-comment"># Manual define the sidebar width. If commented, will be default for:</span>  <span class="hljs-comment"># Muse | Mist: 320</span>  <span class="hljs-comment"># Pisces | Gemini: 240</span>  <span class="hljs-comment">#width: 300</span>  <span class="hljs-comment"># Sidebar Display, available values (only for Muse | Mist):</span>  <span class="hljs-comment">#  - post    expand on posts automatically. Default.</span>  <span class="hljs-comment">#  - always  expand for all pages automatically.</span>  <span class="hljs-comment">#  - hide    expand only when click on the sidebar toggle icon.</span>  <span class="hljs-comment">#  - remove  totally remove sidebar including sidebar toggle.</span>  <span class="hljs-attr">display:</span> <span class="hljs-string">post</span>  <span class="hljs-comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span>  <span class="hljs-attr">offset:</span> <span class="hljs-number">12</span>  <span class="hljs-comment"># Enable sidebar on narrow view (only for Muse | Mist).</span>  <span class="hljs-attr">onmobile:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># Click any blank part of the page to close sidebar (only for Muse | Mist).</span>  <span class="hljs-attr">dimmer:</span> <span class="hljs-literal">false</span></code></pre></div><p>首先有个<code>position</code>的设置，意思是侧边栏是在左边还是右边，只对<code>Pisces</code>和<code>Gemini</code>两个小主题有效</p><p>然后底下有个被加注释的<code>width</code>设置，就是手动设置侧边栏宽度，极度不推荐（除非你有特别长的介绍/友链/文章标题…）</p><p>有一个<code>display</code>设置，这个设置只对<code>Muse</code>和<code>Mist</code>有效，有四个设置值：</p><ul><li>post 当打开文章界面的时候，侧边栏自动弹出，但在首页/分类页/归档页等不会自动弹出，需手动点击按钮展开</li><li>always 在所有页面自动弹出</li><li>hide 在所有页面都不弹出，只在点击按钮时展开</li><li>remove 连按钮都不显示，完整地删除侧边栏</li></ul><p>个人建议post或者always，按个人喜好选择</p><p>接下来有一个<code>offset</code>的设置，这个是指头像到侧边栏顶部的距离，默认即可，只对<code>Pisces</code>和<code>Gemini</code>有效</p><p>然后有一个<code>onmobile</code>的设置，只对<code>Muse</code>和<code>Mist</code>有效，是指在手机或者很窄的浏览器中也显示侧边栏，不建议开启</p><p>最后一个<code>dimmer</code>的设置，也只对<code>Muse</code>和<code>Mist</code>有效，是指打开侧边栏后点击页面任意位置关闭侧边栏，建议开启</p><p>好的，继续看侧边栏的设置：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">back2top:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># Back to top in sidebar.</span>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># Scroll percent label in b2t button.</span>  <span class="hljs-attr">scrollpercent:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># A button to open designated chat widget in sidebar.</span><span class="hljs-comment"># Firstly, you need enable the chat service you want to activate its sidebar button.</span><span class="hljs-attr">chat:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">#service: chatra</span>  <span class="hljs-comment">#service: tidio</span>  <span class="hljs-attr">icon:</span> <span class="hljs-string">comment</span> <span class="hljs-comment"># icon in Font Awesome 4, set false to disable icon</span>  <span class="hljs-attr">text:</span> <span class="hljs-string">Chat</span> <span class="hljs-comment"># button text, change it as you wish</span></code></pre></div><p>一共是<code>back2top</code>和<code>chat</code>两个设置，<code>back2top</code>是指侧边栏底部的回到顶部按钮，建议开启，<code>scrollpercent</code>是指在按钮旁边显示页面已经阅读百分之多少，详见上面图片里的4</p><p><code>chat</code>是在侧边栏的聊天按钮设置，建议不要开启，设置麻烦，而且Bug很多，会导致博客加载很慢</p><p>好的，侧边栏设置到此结束，现在基本上你已经配置好NexT主题的界面了，不过…你的网站还是本地的！先讲一下pages搭建，再继续谈NexT和其它主题的配置及高级优化吧qwq</p><h1 id="测试发布博客"><a href="#测试发布博客" class="headerlink" title="测试发布博客"></a>测试发布博客</h1><p>现在，你应该还什么文章都没写吧qwq 不过在之前的<code>hexo s</code>的时候可以看到，你的博客里已经有一篇Hello World的文章了！这是Hexo帮你写的，里面也有一些教你写文章的说明，这个等会在解释</p><p>现在最重要的是，怎么发布你的博客… 你总不可能让你的朋友们都来你的电脑上才能看到博客吧！</p><p>好的，废话不多说，我们来先讲一下怎么把你的博客发布到Github/Coding/Gitee</p><p>为了把本地仓库的内容传送到GitHub上，需要配置ssh key，你可以把ssh key理解为一个身份验证码，在你把你的博客或者其他内容传送到Github上时，你需要进行身份验证。无论是你的博客还是其他代码仓库都是如此（不然别人就可以随便瞎改你的代码仓库了）</p><p>在Git Bash中输入：<code>ssh-keygen -t rsa -C {email}</code>，请把<code>{email}</code>替换为你注册Github所用的邮箱</p><p>直接按下三次Enter键默认即可，会把ssh key存到<code>C:\Users\Administrator\.ssh</code>里，如果你的计算机用户名不是Administrator，也不用担心，Git会帮你把一切办好</p><p>好的，ssh密钥生成成功，请打开上面的地址<code>C:\Users\Administrator\.ssh</code>，里面有一个<code>id_rsa.pub</code>文件，这就是你的ssh key的公钥了（不懂公钥请忽略）</p><p>右键使用记事本或者你的文本编辑器打开，复制里面的内容，回到Github/Coding/Gitee并登录</p><p>下面的设置差不多，就只讲Github的</p><p>在Github中点击自己头像，选择Settings，然后选择左边的<code>SSH and GPG keys</code>，点击右上角的绿色按钮<code>New SSH key</code>会看到这个界面：</p><p><img src="/posts/how-to-build-a-hexo-blog/ssh-key.png" srcset="/img/loading.gif" alt="SSH keys"></p><p>请把刚刚复制的密钥粘贴到<code>Key</code>框中，<code>Title</code>可以随便写，好像不写也可以，然后点击绿色按钮<code>Add SSH key</code></p><p>接下来，需要在本地验证一下是否成功，在Git Bash中输入<code>ssh -T git@github.com</code>，如果提示<code>Hi {username}! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>就说明SSH配置成功，<code>{username}</code>应该是你的Github用户名</p><p>这里说一下，如果是Coding要验证，请在Git Bash中输入<code>ssh -T git@e.coding.net</code>，如果提示：</p><div class="hljs"><pre><code class="hljs reasonml">Coding 提示: Hello &#123;username&#125;, You've connected <span class="hljs-keyword">to</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Coding</span>.</span></span>net via SSH. This is a personal key. &#123;username&#125;，你好，你已经通过 SSH 协议认证 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Coding</span>.</span></span>net 服务，这是一个个人公钥</code></pre></div><p>说明SSH配置成功，<code>{username}</code>应该是你的Coding用户名</p><p>Gitee也是同样的道理，<code>ssh -T git@gitee.com</code>即可</p><p>接下来，我们需要安装一个帮助我们把blog发布到Git仓库的包：</p><div class="hljs"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span></code></pre></div><p>（如果您配置了<code>cnpm</code>也可以将<code>npm</code>改为<code>cnpm</code>）</p><p>好的，现在你已经能正常连接到Github/Coding/Gitee了，请打开<strong><em>站点配置文件</em></strong>，复制并粘贴到文件末尾（如果已经有类似设置请覆盖）：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><span class="hljs-comment">## Docs: http://hexo.io/docs/deployment.html</span><span class="hljs-attr">deploy:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span>     <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:&#123;username&#125;/&#123;username&#125;.github.io.git</span></code></pre></div><p>（如果文件本身就有这项设置，请先删除原来的空白设置）</p><p>注意：</p><p><del>1. 不知道为什么，好像用<a href="mailto:git@git.coding.net" rel="external nofollow noopener noreferrer" target="_blank">git@git.coding.net</a>部署Coding会报错，所以请用https连接</del></p><p>（Coding再次改版后已不再出现类似错误）</p><ol start="2"><li>之前选择了多个平台的，依次往下写即可，比如：</li></ol><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><span class="hljs-comment">## Docs: http://hexo.io/docs/deployment.html</span><span class="hljs-attr">deploy:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span>     <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:&#123;username&#125;/&#123;username&#125;.github.io.git</span>    <span class="hljs-attr">coding:</span> <span class="hljs-string">git@e.coding.net:&#123;username&#125;/&#123;username&#125;.coding.me.git</span></code></pre></div><ol start="3"><li>请注意，不要直接复制代码就开干，请把<code>{username}</code>替换过来！</li><li>千万注意：<code>github:</code>后面要有一个空格，你继续写的也是一样，否则会出现错误</li></ol><p>Github那行的所有<code>{username}</code>换成你的Github用户名，Coding那行的所有<code>{username}</code>换成你的Coding用户名，Gitee的请自己百度或者直接在项目地址选择<code>克隆/下载</code>然后复制里面给的连接</p><p>好的，请记得要保存站点配置文件，可以开始发布了</p><p>（温馨提示：以后在发布前建议先使用<code>hexo s</code>检查界面是否有Bug或者Markdown是否崩了等等）</p><p>PS：在发布之前请先执行：</p><div class="hljs"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"(Username)"</span>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"(Email)"</span></code></pre></div><p>username和email可以采用Github/Coding注册的用户名和邮箱</p><p>发布指令（在Git Bash中执行）：</p><div class="hljs"><pre><code class="hljs sas">hexo cl <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d</code></pre></div><p>等待数十秒甚至几分钟（取决于网速）后，如果您看到：<code>INFO  Deploy done: git</code></p><p>恭喜！成功了！</p><p>如果出现一大堆什么 at xxx.xxx 之类的，说明可能由于主题配置或者站点配置问题，导致某些设置无法被识别，从而出现错误，<strong>记住，所有在两个配置文件中的设置，形如<code>xxx: xxx</code>的必须在冒号后打一个空格！</strong>（当然了，如果<code>hexo s</code>无错误，但发布时出错，说明肯定是你发布的配置有问题，比如把github打成guthub之类的低级拼写错误）</p><p>这时候，应该可以通过访问 <a href="http://xxx.github.io" target="_blank" rel="external nofollow noopener noreferrer">http://xxx.github.io</a> （请自行将xxx换成您的Github用户名）或者 <a href="http://xxx.coding.me" target="_blank" rel="external nofollow noopener noreferrer">http://xxx.coding.me</a> （请自行将xxx换成您的Coding用户名）等等来查看您的博客了qwq（如果提示<code>404 There isn&#39;t a GitHub Pages site here.</code>等，请进入相应的repo，选择Settings，在Github Pages中选择master分支即可）</p><p><strong>更新：由于Coding再次更新，请忽略上文中的xxx.coding.me地址。请在Coding中相应的代码仓库的静态Pages页面查看</strong></p><p>备注：</p><ol><li><code>hexo s</code>是<code>hexo server</code>的缩写，在本地预览站点</li><li><code>hexo cl</code>是<code>hexo clean</code>的缩写，删除上次生成的站点HTML文件</li><li><code>hexo g</code>是<code>hexo generate</code>的缩写，生成站点HTML文件</li><li><code>hexo d</code>是<code>hexo deploy</code>的缩写，把生成的站点HTML文件发布到git仓库中（或者还有别的发布方式）</li></ol><p><strong>注意：<code>hexo clean</code>不能缩写为<code>hexo c</code>，因为存在命令<code>hexo config</code></strong></p><h1 id="书写并发布博客"><a href="#书写并发布博客" class="headerlink" title="书写并发布博客"></a>书写并发布博客</h1><p>前面已经讲了博客的配置/发布了，现在讲一下如何在Hexo里写一篇博客</p><p>在<strong><em>站点目录</em></strong>中右键，选择<code>Git Bash Here</code>，输入命令<code>hexo new xxx</code>（请把<code>xxx</code>替换为您的文章URL，可以用中文，含有空格可能会出错）</p><p>举个例子：<code>hexo new fuck</code>就是生成一篇URL为<code>fuck</code>的文章，编辑并发布后，您可以在<code>{你的网址}/fuck</code>访问到这篇文章。文章标题可以稍后修改</p><p>也可以<code>hexo new 你好！</code>，稍后可以在<code>{你的网址}/你好！</code>访问。但是，不能用<code>hexo new hello world</code>，必须<code>hexo new hello-world</code>或者<code>hexo new helloworld</code>都可以</p><p>好的，假设我们刚刚执行的是<code>hexo new test</code>，待命令执行成功后，你应该可以在你的<strong><em>站点目录</em></strong>里找到一个名叫<code>source</code>的文件夹，打开它，你应该可以看到一个名叫<code>_posts</code>的文件夹，打开它，可以看到<code>test.md</code>（<code>test</code>就是前面所说的URL，也是你之前填的那个<code>xxx</code>）</p><p>这就是这篇博文的Markdown源代码了，你可以随意地修改它，基本上所有常用的Markdown语法都能解析，但是Latex暂时不能，这一步等会再配置</p><p>如果您平常经常写代码，您肯定会喜欢使用VS Code作为您的Markdown编辑器，VS Code支持几乎所有语言代码的高亮；如果您很少写代码，只是平常写一些文章，您或许会更加喜欢Typora</p><p>Typora是什么呢？</p><p>一个轻便但高级的Markdown编辑器</p><p>尽管体积很小，但是支持图片/标题/表格/清单/代码块/图标/表情/高亮…，让你可以专注于你所写的内容。Typora还可以自动帮你实时生成文章的TOC，还可以实时字数统计，自动配对括号，甚至可以方便地导出为PDF/HTML/DOC等，也可以从这些类型地文档导入。</p><p>官网地址：<a href="https://www.typora.io/" target="_blank" rel="external nofollow noopener noreferrer">https://www.typora.io/</a></p><p>好的，打了这么久广告，让我们回归正题。</p><p>按理说，你打开你新建完的markdown文件，会看到下面的一个模板：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">test</span><span class="hljs-attr">date:</span> <span class="hljs-string">xxxx-xx-xx</span> <span class="hljs-string">xx:xx:xx</span><span class="hljs-attr">tags:</span><span class="hljs-meta">---</span></code></pre></div><p>好的，<code>title:</code>后面就是这篇文章的标题了，注意冒号是英文的，和文章名之间必须有一个空格，否则后面生成的时候会报错</p><p><code>date:</code>后面是文章创作的时间，这个时间会由系统自动设置为你在Git Bash里创建这篇文章的时间，一般来说不用修改，<del>我曾经舍不得删一篇没用的测试文章，就把它的日期改成了0100-01-01 00:00:00，然后我发现年份必须在0100之后，否则好像会出一些Bug</del></p><p><code>tags:</code>后面是这篇文章的标签，请按照以下格式书写：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span> <span class="hljs-comment"># 注意，冒号后面最好加一个空格</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签1</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签2</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签3</span></code></pre></div><p>当然了，如果你这篇文章只有一个标签，也可以用<code>tags: [标签1]</code>进行书写</p><p>很明显，这些设置是不够的，我们可以加上<code>categories</code>的设置，也就是分类：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">test</span><span class="hljs-attr">date:</span> <span class="hljs-string">xxxx-xx-xx</span> <span class="hljs-string">xx:xx:xx</span><span class="hljs-attr">tags:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签1</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签2</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签3</span><span class="hljs-attr">categories:</span> <span class="hljs-string">[分类]</span><span class="hljs-meta">---</span></code></pre></div><p><strong>注：Hexo不支持多个并列分类，只支持父子分类，但有些主题（比如我的主题Materialized）可以支持。在大多数主题（比如NexT）中，一篇文章使用多个category会导致后面的分类成为后面的分类成为前面分类的子分类，比如：</strong></p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">categories:</span>   <span class="hljs-bullet">-</span> <span class="hljs-string">分类1</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">分类2</span></code></pre></div><p><strong>会导致分类2成为分类1的子分类，而不是并列分类。</strong></p><p>但是，在像Materialized的少数主题中，会把上面的语法当成并列分类显示。Theme-Materialized: <a href="https://github.com/theme-materialized/hexo-theme-materialized" target="_blank" rel="noopener">https://github.com/theme-materialized/hexo-theme-materialized</a></p><p>好的。你已经完成了基本的文章设置操作，可以开始尽情地使用Markdown写文章啦~</p><p>写完了以后，保存，回到Git Bash，输入<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</code>并静待完成即可。然后，你就可以在你的网站上愉快地查看你的博客了！</p><p>备注（如果你是一步步跟着来的，不用看了，“尝试发布博客”那章有了）：</p><ol><li><code>hexo s</code>是<code>hexo server</code>的缩写，在本地预览站点</li><li><code>hexo cl</code>是<code>hexo clean</code>的缩写，删除上次生成的站点HTML文件</li><li><code>hexo g</code>是<code>hexo generate</code>的缩写，生成站点HTML文件</li><li><code>hexo d</code>是<code>hexo deploy</code>的缩写，把生成的站点HTML文件发布到git仓库中（或者还有别的发布方式）</li></ol><p><strong>注意：<code>hexo clean</code>不能缩写为<code>hexo c</code>，因为存在命令<code>hexo config</code></strong></p><h1 id="NexT主题高级美化"><a href="#NexT主题高级美化" class="headerlink" title="NexT主题高级美化"></a>NexT主题高级美化</h1><p>暂时咕咕qwq</p><hr><p>注：由于博主较为忙碌，本文更新极为缓慢，更多请访问ouuan的博客相关文章 <a href="https://ouuan.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97" target="_blank" rel="external nofollow noopener noreferrer">https://ouuan.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文部分内容来自&lt;a href=&quot;https://ouuan.github.io&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;ouuan的博客&lt;/a&gt;，&lt;a href=&quot;https://ouuan.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2020.02.13更新：关于Coding再次更新，已更改/增加相应内容。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我一直以来认为，要弄一个自己的博客或者网站，必须到某些什么“建站工具”里购买建站套装，再自己买一个域名&lt;/p&gt;
&lt;p&gt;这样算下来，一年至少得两三百RMB&lt;/p&gt;
&lt;p&gt;而且，域名什么的配置繁杂，非常麻烦&lt;/p&gt;
&lt;p&gt;所以，一直以来我都是用的CSDN/博客园建的博客，想想SEO也做的好（SEO好就意味着你写的东西可以在百度/谷歌等搜索引擎上被别人查到），也就没什么怨言&lt;/p&gt;
&lt;p&gt;但是，众所周知，CSDN和博客园的广告一大堆，根本不是我能容忍的&lt;/p&gt;
&lt;p&gt;而且，无论选择什么主题，都难看得要死qwq&lt;/p&gt;
&lt;p&gt;（当然了，最近有一位dalao弄出了博客园的极致美化，请看&lt;a href=&quot;https://github.com/BNDong/Cnblogs-Theme-SimpleMemory/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BNDong/Cnblogs-Theme-SimpleMemory&lt;/a&gt;，这个其实还不错）&lt;/p&gt;
&lt;p&gt;就在今年3月份，我才知道还有这样一个东西的存在&lt;/p&gt;
&lt;p&gt;Hexo&lt;/p&gt;
&lt;p&gt;这个东西可以帮你快速将您用markdown和Latex写的文章渲染为html文件，并借助Github/Coding/Gitee Pages快速发布。&lt;/p&gt;
&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;阅读完本文后，您可以做到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一分钱不花搭建一个美丽而简洁的博客（具体由主题决定）&lt;/li&gt;
&lt;li&gt;拥有一个（或者多个）简短的免费顶级域名&lt;/li&gt;
&lt;li&gt;限制您的博客仅限某些IP地址访问，或者拒绝某些IP地址访问&lt;/li&gt;
&lt;li&gt;轻松写作/发布博客&lt;/li&gt;
&lt;li&gt;做好百度与谷歌的SEO优化，其他搜索引擎类似&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：如果您要查看某个功能的设置，请直接点击文章左边的目录（TOC）直达&lt;/p&gt;
&lt;p&gt;本文基于Hexo 3.9.0，文中不会提及因不同版本造成的差异（不过其实也没什么差异qwq&lt;/p&gt;
&lt;p&gt;本文中提到的node.js和git安装仅适用于Windows，如果您使用其他系统请自行搜索下载&lt;/p&gt;
    
    </summary>
    
    
      <category term="随记" scheme="https://code004.ml/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="搭建" scheme="https://code004.ml/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="博客" scheme="https://code004.ml/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>蜘蛛侠将离开漫威宇宙</title>
    <link href="https://code004.ml/posts/spiderman-leave-mcu/"/>
    <id>https://code004.ml/posts/spiderman-leave-mcu/</id>
    <published>2019-08-21T15:24:12.000Z</published>
    <updated>2019-08-29T10:34:22.826Z</updated>
    
    <content type="html"><![CDATA[<p>今日下午传来一个震惊的消息… 蜘蛛侠由于索尼和迪士尼的争执将离开漫威宇宙</p><p>起因是这样的，原来对于蜘蛛侠的电影，一部分由迪士尼拿全部利润，另一部分迪士尼拿1%的利润，99%的利润归索尼</p><p>结果，迪士尼不满意，想要在“另一部分”电影中也拿50%利润，索尼不干了，就把蜘蛛侠给收回来了</p><p>登上Twitter一看，一片哀嚎之声，一个投票（24:00截止的），我看的时候已经是23:15左右了，问蜘蛛侠属于哪里</p><div class="hljs"><pre><code class="hljs angelscript">A. 属于索尼(<span class="hljs-number">6</span>%)B. 不好说(<span class="hljs-number">7</span>%)C. 属于漫威(<span class="hljs-number">87</span>%)</code></pre></div><p>（数字不一定完全准确，反正选C的基本上有90%）</p><p>不得不说，荷兰弟（好吧，我第一次这么称呼他，后面我们还是叫他Tom吧）还是很有吸引力的qwq</p><p>天啊qwq <code>730K people are Tweeting about this</code>，实时就有73万人在发与此相关消息！还没算那些忘了打Tag的（比如我）！</p><a id="more"></a><p><img src="/posts/spiderman-leave-mcu/twitter1.png" srcset="/img/loading.gif" alt="Twitter Screenshot 1"></p><p><code>#SpiderManFarFromTheMCU</code>是热搜话题，<code>#SaveSpidey</code>是热搜话题，<code>#SaveSpidermanFromSony</code>也是热搜话题，还有个一般搜索话题<code>#SpidermanBelongsInTheMCU</code></p><p><img src="/posts/spiderman-leave-mcu/twitter2.png" srcset="/img/loading.gif" alt="Twitter Screenshot 2"></p><p><img src="/posts/spiderman-leave-mcu/twitter3.png" srcset="/img/loading.gif" alt="Twitter Screenshot 3"></p><p>好的，我们再来看一些小小的投票（可能参加投票的人很少，因为我是在0点之后截的图，都是0点之后的投票，可能只发出来了10分钟，但是至少肯定有十几个或者几十个人参与的）</p><p><img src="/posts/spiderman-leave-mcu/twitter4.png" srcset="/img/loading.gif" alt="Twitter Vote 1"></p><p><img src="/posts/spiderman-leave-mcu/twitter5.png" srcset="/img/loading.gif" alt="Twitter Vote 2"></p><p>OMG，这完全是一边倒啊qwq （前面说到的那个投票忘了截qwq）</p><p>不管怎样，希望该死的Sony能马上停止，希望Tom再次出现在MCU的电影中。你呢？</p><p>PS:可以在Twitter上看到许多骂Sony的，还有人做出来了一个<code>Fuck you 3000</code>的图片，我也真的是服了qwq</p><p>PPS:可以很轻松的发现，这个帖子就是全站戒备的原因qwq</p><hr><p><strong><em>Update 2019.8.22 9:24:08</em></strong></p><p>早上又去Twitter上看了一下，昨晚是我太偏激了。细细回想，其实是Disney的fault。</p><p>大家全部认同Spider-Man应该在漫威，但是这一切是Disney追求利益的后果，不应该完全怪Sony，反而更多是Disney的错</p><p>附上昨天那两个投票现在的截图（现在的结果基本上就完全公正了qwq）</p><p><img src="/posts/spiderman-leave-mcu/twitter6.png" srcset="/img/loading.gif" alt="Twitter Update Vote 1"></p><p><img src="/posts/spiderman-leave-mcu/twitter7.png" srcset="/img/loading.gif" alt="Twitter Update Vote 2"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今日下午传来一个震惊的消息… 蜘蛛侠由于索尼和迪士尼的争执将离开漫威宇宙&lt;/p&gt;
&lt;p&gt;起因是这样的，原来对于蜘蛛侠的电影，一部分由迪士尼拿全部利润，另一部分迪士尼拿1%的利润，99%的利润归索尼&lt;/p&gt;
&lt;p&gt;结果，迪士尼不满意，想要在“另一部分”电影中也拿50%利润，索尼不干了，就把蜘蛛侠给收回来了&lt;/p&gt;
&lt;p&gt;登上Twitter一看，一片哀嚎之声，一个投票（24:00截止的），我看的时候已经是23:15左右了，问蜘蛛侠属于哪里&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs angelscript&quot;&gt;A. 属于索尼(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;%)
B. 不好说(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;%)
C. 属于漫威(&lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;%)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（数字不一定完全准确，反正选C的基本上有90%）&lt;/p&gt;
&lt;p&gt;不得不说，荷兰弟（好吧，我第一次这么称呼他，后面我们还是叫他Tom吧）还是很有吸引力的qwq&lt;/p&gt;
&lt;p&gt;天啊qwq &lt;code&gt;730K people are Tweeting about this&lt;/code&gt;，实时就有73万人在发与此相关消息！还没算那些忘了打Tag的（比如我）！&lt;/p&gt;
    
    </summary>
    
    
      <category term="随记" scheme="https://code004.ml/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="娱乐" scheme="https://code004.ml/tags/%E5%A8%B1%E4%B9%90/"/>
    
  </entry>
  
</feed>
